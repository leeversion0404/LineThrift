// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package LineThrift

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/shillbie/register/thrift"
)

type UpdateAttributeType int64

const (
	UpdateAttributeType_NAME                     UpdateAttributeType = 1
	UpdateAttributeType_PICTURE_STATUS           UpdateAttributeType = 2
	UpdateAttributeType_PREVENTED_JOIN_BY_TICKET UpdateAttributeType = 4
	UpdateAttributeType_NOTIFICATION_SETTING     UpdateAttributeType = 8
	UpdateAttributeType_INVITATION_TICKET        UpdateAttributeType = 16
	UpdateAttributeType_FAVORITE_TIMESTAMP       UpdateAttributeType = 32
	UpdateAttributeType_CHAT_TYPE                UpdateAttributeType = 64
)

func (p UpdateAttributeType) String() string {
	switch p {
	case UpdateAttributeType_NAME:
		return "NAME"
	case UpdateAttributeType_PICTURE_STATUS:
		return "PICTURE_STATUS"
	case UpdateAttributeType_PREVENTED_JOIN_BY_TICKET:
		return "PREVENTED_JOIN_BY_TICKET"
	case UpdateAttributeType_NOTIFICATION_SETTING:
		return "NOTIFICATION_SETTING"
	case UpdateAttributeType_INVITATION_TICKET:
		return "INVITATION_TICKET"
	case UpdateAttributeType_FAVORITE_TIMESTAMP:
		return "FAVORITE_TIMESTAMP"
	case UpdateAttributeType_CHAT_TYPE:
		return "CHAT_TYPE"
	}
	return "<UNSET>"
}

func UpdateAttributeTypeFromString(s string) (UpdateAttributeType, error) {
	switch s {
	case "NAME":
		return UpdateAttributeType_NAME, nil
	case "PICTURE_STATUS":
		return UpdateAttributeType_PICTURE_STATUS, nil
	case "PREVENTED_JOIN_BY_TICKET":
		return UpdateAttributeType_PREVENTED_JOIN_BY_TICKET, nil
	case "NOTIFICATION_SETTING":
		return UpdateAttributeType_NOTIFICATION_SETTING, nil
	case "INVITATION_TICKET":
		return UpdateAttributeType_INVITATION_TICKET, nil
	case "FAVORITE_TIMESTAMP":
		return UpdateAttributeType_FAVORITE_TIMESTAMP, nil
	case "CHAT_TYPE":
		return UpdateAttributeType_CHAT_TYPE, nil
	}
	return UpdateAttributeType(0), fmt.Errorf("not a valid UpdateAttributeType string")
}

func UpdateAttributeTypePtr(v UpdateAttributeType) *UpdateAttributeType { return &v }

func (p UpdateAttributeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *UpdateAttributeType) UnmarshalText(text []byte) error {
	q, err := UpdateAttributeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *UpdateAttributeType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = UpdateAttributeType(v)
	return nil
}

func (p *UpdateAttributeType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SyncType int64

const (
	SyncType_ALL            SyncType = 0
	SyncType_PROFILE        SyncType = 1
	SyncType_SETTINGS       SyncType = 2
	SyncType_CONFIGURATIONS SyncType = 3
	SyncType_CONTACT        SyncType = 4
	SyncType_GROUP          SyncType = 5
	SyncType_E2EE           SyncType = 6
	SyncType_MESSAGE        SyncType = 7
)

func (p SyncType) String() string {
	switch p {
	case SyncType_ALL:
		return "ALL"
	case SyncType_PROFILE:
		return "PROFILE"
	case SyncType_SETTINGS:
		return "SETTINGS"
	case SyncType_CONFIGURATIONS:
		return "CONFIGURATIONS"
	case SyncType_CONTACT:
		return "CONTACT"
	case SyncType_GROUP:
		return "GROUP"
	case SyncType_E2EE:
		return "E2EE"
	case SyncType_MESSAGE:
		return "MESSAGE"
	}
	return "<UNSET>"
}

func SyncTypeFromString(s string) (SyncType, error) {
	switch s {
	case "ALL":
		return SyncType_ALL, nil
	case "PROFILE":
		return SyncType_PROFILE, nil
	case "SETTINGS":
		return SyncType_SETTINGS, nil
	case "CONFIGURATIONS":
		return SyncType_CONFIGURATIONS, nil
	case "CONTACT":
		return SyncType_CONTACT, nil
	case "GROUP":
		return SyncType_GROUP, nil
	case "E2EE":
		return SyncType_E2EE, nil
	case "MESSAGE":
		return SyncType_MESSAGE, nil
	}
	return SyncType(0), fmt.Errorf("not a valid SyncType string")
}

func SyncTypePtr(v SyncType) *SyncType { return &v }

func (p SyncType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SyncType) UnmarshalText(text []byte) error {
	q, err := SyncTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SyncType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SyncType(v)
	return nil
}

func (p *SyncType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SyncReasonType int64

const (
	SyncReasonType_UNKNOWN                       SyncReasonType = 0
	SyncReasonType_REVISION_GAP_TOO_LARGE_CLIENT SyncReasonType = 1
	SyncReasonType_REVISION_GAP_TOO_LARGE_SERVER SyncReasonType = 2
	SyncReasonType_OPERATION_EXPIRED             SyncReasonType = 3
	SyncReasonType_REVISION_HOLE                 SyncReasonType = 4
	SyncReasonType_FORCE_TRIGGERED               SyncReasonType = 5
)

func (p SyncReasonType) String() string {
	switch p {
	case SyncReasonType_UNKNOWN:
		return "UNKNOWN"
	case SyncReasonType_REVISION_GAP_TOO_LARGE_CLIENT:
		return "REVISION_GAP_TOO_LARGE_CLIENT"
	case SyncReasonType_REVISION_GAP_TOO_LARGE_SERVER:
		return "REVISION_GAP_TOO_LARGE_SERVER"
	case SyncReasonType_OPERATION_EXPIRED:
		return "OPERATION_EXPIRED"
	case SyncReasonType_REVISION_HOLE:
		return "REVISION_HOLE"
	case SyncReasonType_FORCE_TRIGGERED:
		return "FORCE_TRIGGERED"
	}
	return "<UNSET>"
}

func SyncReasonTypeFromString(s string) (SyncReasonType, error) {
	switch s {
	case "UNKNOWN":
		return SyncReasonType_UNKNOWN, nil
	case "REVISION_GAP_TOO_LARGE_CLIENT":
		return SyncReasonType_REVISION_GAP_TOO_LARGE_CLIENT, nil
	case "REVISION_GAP_TOO_LARGE_SERVER":
		return SyncReasonType_REVISION_GAP_TOO_LARGE_SERVER, nil
	case "OPERATION_EXPIRED":
		return SyncReasonType_OPERATION_EXPIRED, nil
	case "REVISION_HOLE":
		return SyncReasonType_REVISION_HOLE, nil
	case "FORCE_TRIGGERED":
		return SyncReasonType_FORCE_TRIGGERED, nil
	}
	return SyncReasonType(0), fmt.Errorf("not a valid SyncReasonType string")
}

func SyncReasonTypePtr(v SyncReasonType) *SyncReasonType { return &v }

func (p SyncReasonType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SyncReasonType) UnmarshalText(text []byte) error {
	q, err := SyncReasonTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *SyncReasonType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = SyncReasonType(v)
	return nil
}

func (p *SyncReasonType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type GlobalEvents int64

const (
	GlobalEvents_DUMMY                  GlobalEvents = 0
	GlobalEvents_NOTICE                 GlobalEvents = 1
	GlobalEvents_MORETAB                GlobalEvents = 2
	GlobalEvents_STICKERSHOP            GlobalEvents = 3
	GlobalEvents_CHANNEL                GlobalEvents = 4
	GlobalEvents_DENY_KEYWORD           GlobalEvents = 5
	GlobalEvents_CONNECTIONINFO         GlobalEvents = 6
	GlobalEvents_BUDDY                  GlobalEvents = 7
	GlobalEvents_TIMELINEINFO           GlobalEvents = 8
	GlobalEvents_THEMESHOP              GlobalEvents = 9
	GlobalEvents_CALLRATE               GlobalEvents = 10
	GlobalEvents_CONFIGURATION          GlobalEvents = 11
	GlobalEvents_STICONSHOP             GlobalEvents = 12
	GlobalEvents_SUGGESTDICTIONARY      GlobalEvents = 13
	GlobalEvents_SUGGESTSETTINGS        GlobalEvents = 14
	GlobalEvents_USERSETTINGS           GlobalEvents = 15
	GlobalEvents_ANALYTICSINFO          GlobalEvents = 16
	GlobalEvents_SEARCHPOPULARKEYWORD   GlobalEvents = 17
	GlobalEvents_SEARCHNOTICE           GlobalEvents = 18
	GlobalEvents_TIMELINE               GlobalEvents = 19
	GlobalEvents_SEARCHPOPULARCATEGORY  GlobalEvents = 20
	GlobalEvents_EXTENDEDPROFILE        GlobalEvents = 21
	GlobalEvents_SEASONALMARKETING      GlobalEvents = 22
	GlobalEvents_NEWSTAB                GlobalEvents = 23
	GlobalEvents_SUGGESTDICTIONARYV2    GlobalEvents = 24
	GlobalEvents_CHATAPPSYNC            GlobalEvents = 25
	GlobalEvents_AGREEMENTS             GlobalEvents = 26
	GlobalEvents_INSTANTNEWS            GlobalEvents = 27
	GlobalEvents_EMOJI_MAPPING          GlobalEvents = 28
	GlobalEvents_SEARCHBARKEYWORDS      GlobalEvents = 29
	GlobalEvents_SHOPPING               GlobalEvents = 30
	GlobalEvents_CHAT_EFFECT_BACKGROUND GlobalEvents = 31
	GlobalEvents_CHAT_EFFECT_KEYWORD    GlobalEvents = 32
	GlobalEvents_SEARCHINDEX            GlobalEvents = 33
	GlobalEvents_HUBTAB                 GlobalEvents = 34
	GlobalEvents_PAY_RULE_UPDATED       GlobalEvents = 35
	GlobalEvents_SMARTCH                GlobalEvents = 36
	GlobalEvents_HOME_SERVICE_LIST      GlobalEvents = 37
	GlobalEvents_TIMELINESTORY          GlobalEvents = 38
	GlobalEvents_WALLET_TAB             GlobalEvents = 39
	GlobalEvents_POD_TAB                GlobalEvents = 40
	GlobalEvents_HOME_SAFETY_CHECK      GlobalEvents = 41
	GlobalEvents_HOME_SEASONAL_EFFECT   GlobalEvents = 42
)

func (p GlobalEvents) String() string {
	switch p {
	case GlobalEvents_DUMMY:
		return "DUMMY"
	case GlobalEvents_NOTICE:
		return "NOTICE"
	case GlobalEvents_MORETAB:
		return "MORETAB"
	case GlobalEvents_STICKERSHOP:
		return "STICKERSHOP"
	case GlobalEvents_CHANNEL:
		return "CHANNEL"
	case GlobalEvents_DENY_KEYWORD:
		return "DENY_KEYWORD"
	case GlobalEvents_CONNECTIONINFO:
		return "CONNECTIONINFO"
	case GlobalEvents_BUDDY:
		return "BUDDY"
	case GlobalEvents_TIMELINEINFO:
		return "TIMELINEINFO"
	case GlobalEvents_THEMESHOP:
		return "THEMESHOP"
	case GlobalEvents_CALLRATE:
		return "CALLRATE"
	case GlobalEvents_CONFIGURATION:
		return "CONFIGURATION"
	case GlobalEvents_STICONSHOP:
		return "STICONSHOP"
	case GlobalEvents_SUGGESTDICTIONARY:
		return "SUGGESTDICTIONARY"
	case GlobalEvents_SUGGESTSETTINGS:
		return "SUGGESTSETTINGS"
	case GlobalEvents_USERSETTINGS:
		return "USERSETTINGS"
	case GlobalEvents_ANALYTICSINFO:
		return "ANALYTICSINFO"
	case GlobalEvents_SEARCHPOPULARKEYWORD:
		return "SEARCHPOPULARKEYWORD"
	case GlobalEvents_SEARCHNOTICE:
		return "SEARCHNOTICE"
	case GlobalEvents_TIMELINE:
		return "TIMELINE"
	case GlobalEvents_SEARCHPOPULARCATEGORY:
		return "SEARCHPOPULARCATEGORY"
	case GlobalEvents_EXTENDEDPROFILE:
		return "EXTENDEDPROFILE"
	case GlobalEvents_SEASONALMARKETING:
		return "SEASONALMARKETING"
	case GlobalEvents_NEWSTAB:
		return "NEWSTAB"
	case GlobalEvents_SUGGESTDICTIONARYV2:
		return "SUGGESTDICTIONARYV2"
	case GlobalEvents_CHATAPPSYNC:
		return "CHATAPPSYNC"
	case GlobalEvents_AGREEMENTS:
		return "AGREEMENTS"
	case GlobalEvents_INSTANTNEWS:
		return "INSTANTNEWS"
	case GlobalEvents_EMOJI_MAPPING:
		return "EMOJI_MAPPING"
	case GlobalEvents_SEARCHBARKEYWORDS:
		return "SEARCHBARKEYWORDS"
	case GlobalEvents_SHOPPING:
		return "SHOPPING"
	case GlobalEvents_CHAT_EFFECT_BACKGROUND:
		return "CHAT_EFFECT_BACKGROUND"
	case GlobalEvents_CHAT_EFFECT_KEYWORD:
		return "CHAT_EFFECT_KEYWORD"
	case GlobalEvents_SEARCHINDEX:
		return "SEARCHINDEX"
	case GlobalEvents_HUBTAB:
		return "HUBTAB"
	case GlobalEvents_PAY_RULE_UPDATED:
		return "PAY_RULE_UPDATED"
	case GlobalEvents_SMARTCH:
		return "SMARTCH"
	case GlobalEvents_HOME_SERVICE_LIST:
		return "HOME_SERVICE_LIST"
	case GlobalEvents_TIMELINESTORY:
		return "TIMELINESTORY"
	case GlobalEvents_WALLET_TAB:
		return "WALLET_TAB"
	case GlobalEvents_POD_TAB:
		return "POD_TAB"
	case GlobalEvents_HOME_SAFETY_CHECK:
		return "HOME_SAFETY_CHECK"
	case GlobalEvents_HOME_SEASONAL_EFFECT:
		return "HOME_SEASONAL_EFFECT"
	}
	return "<UNSET>"
}

func GlobalEventsFromString(s string) (GlobalEvents, error) {
	switch s {
	case "DUMMY":
		return GlobalEvents_DUMMY, nil
	case "NOTICE":
		return GlobalEvents_NOTICE, nil
	case "MORETAB":
		return GlobalEvents_MORETAB, nil
	case "STICKERSHOP":
		return GlobalEvents_STICKERSHOP, nil
	case "CHANNEL":
		return GlobalEvents_CHANNEL, nil
	case "DENY_KEYWORD":
		return GlobalEvents_DENY_KEYWORD, nil
	case "CONNECTIONINFO":
		return GlobalEvents_CONNECTIONINFO, nil
	case "BUDDY":
		return GlobalEvents_BUDDY, nil
	case "TIMELINEINFO":
		return GlobalEvents_TIMELINEINFO, nil
	case "THEMESHOP":
		return GlobalEvents_THEMESHOP, nil
	case "CALLRATE":
		return GlobalEvents_CALLRATE, nil
	case "CONFIGURATION":
		return GlobalEvents_CONFIGURATION, nil
	case "STICONSHOP":
		return GlobalEvents_STICONSHOP, nil
	case "SUGGESTDICTIONARY":
		return GlobalEvents_SUGGESTDICTIONARY, nil
	case "SUGGESTSETTINGS":
		return GlobalEvents_SUGGESTSETTINGS, nil
	case "USERSETTINGS":
		return GlobalEvents_USERSETTINGS, nil
	case "ANALYTICSINFO":
		return GlobalEvents_ANALYTICSINFO, nil
	case "SEARCHPOPULARKEYWORD":
		return GlobalEvents_SEARCHPOPULARKEYWORD, nil
	case "SEARCHNOTICE":
		return GlobalEvents_SEARCHNOTICE, nil
	case "TIMELINE":
		return GlobalEvents_TIMELINE, nil
	case "SEARCHPOPULARCATEGORY":
		return GlobalEvents_SEARCHPOPULARCATEGORY, nil
	case "EXTENDEDPROFILE":
		return GlobalEvents_EXTENDEDPROFILE, nil
	case "SEASONALMARKETING":
		return GlobalEvents_SEASONALMARKETING, nil
	case "NEWSTAB":
		return GlobalEvents_NEWSTAB, nil
	case "SUGGESTDICTIONARYV2":
		return GlobalEvents_SUGGESTDICTIONARYV2, nil
	case "CHATAPPSYNC":
		return GlobalEvents_CHATAPPSYNC, nil
	case "AGREEMENTS":
		return GlobalEvents_AGREEMENTS, nil
	case "INSTANTNEWS":
		return GlobalEvents_INSTANTNEWS, nil
	case "EMOJI_MAPPING":
		return GlobalEvents_EMOJI_MAPPING, nil
	case "SEARCHBARKEYWORDS":
		return GlobalEvents_SEARCHBARKEYWORDS, nil
	case "SHOPPING":
		return GlobalEvents_SHOPPING, nil
	case "CHAT_EFFECT_BACKGROUND":
		return GlobalEvents_CHAT_EFFECT_BACKGROUND, nil
	case "CHAT_EFFECT_KEYWORD":
		return GlobalEvents_CHAT_EFFECT_KEYWORD, nil
	case "SEARCHINDEX":
		return GlobalEvents_SEARCHINDEX, nil
	case "HUBTAB":
		return GlobalEvents_HUBTAB, nil
	case "PAY_RULE_UPDATED":
		return GlobalEvents_PAY_RULE_UPDATED, nil
	case "SMARTCH":
		return GlobalEvents_SMARTCH, nil
	case "HOME_SERVICE_LIST":
		return GlobalEvents_HOME_SERVICE_LIST, nil
	case "TIMELINESTORY":
		return GlobalEvents_TIMELINESTORY, nil
	case "WALLET_TAB":
		return GlobalEvents_WALLET_TAB, nil
	case "POD_TAB":
		return GlobalEvents_POD_TAB, nil
	case "HOME_SAFETY_CHECK":
		return GlobalEvents_HOME_SAFETY_CHECK, nil
	case "HOME_SEASONAL_EFFECT":
		return GlobalEvents_HOME_SEASONAL_EFFECT, nil
	}
	return GlobalEvents(0), fmt.Errorf("not a valid GlobalEvents string")
}

func GlobalEventsPtr(v GlobalEvents) *GlobalEvents { return &v }

func (p GlobalEvents) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *GlobalEvents) UnmarshalText(text []byte) error {
	q, err := GlobalEventsFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *GlobalEvents) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = GlobalEvents(v)
	return nil
}

func (p *GlobalEvents) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type IndividualEventType int64

const (
	IndividualEventType_NOTIFICATION_ITEM_EXIST        IndividualEventType = 1
	IndividualEventType_TIMELINE_ITEM_EXIST            IndividualEventType = 2
	IndividualEventType_NOTE_GROUP_NEW_ITEM_EXIST      IndividualEventType = 4
	IndividualEventType_TIMELINE_BUDDYGROUP_CHANGED    IndividualEventType = 8
	IndividualEventType_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST IndividualEventType = 16
	IndividualEventType_ALBUM_ITEM_EXIST               IndividualEventType = 32
	IndividualEventType_TIMELINE_ITEM_DELETED          IndividualEventType = 64
	IndividualEventType_OTOGROUP_ITEM_EXIST            IndividualEventType = 128
	IndividualEventType_GROUPHOME_NEW_ITEM_EXIST       IndividualEventType = 256
	IndividualEventType_GROUPHOME_HIDDEN_ITEM_CHANGED  IndividualEventType = 512
	IndividualEventType_NOTIFICATION_ITEM_CHANGED      IndividualEventType = 1024
	IndividualEventType_BEAD_ITEM_HIDE                 IndividualEventType = 2048
	IndividualEventType_BEAD_ITEM_SHOW                 IndividualEventType = 4096
	IndividualEventType_LINE_TICKET_UPDATED            IndividualEventType = 8192
	IndividualEventType_TIMELINE_STORY_UPDATED         IndividualEventType = 16384
	IndividualEventType_SMARTCH_UPDATED                IndividualEventType = 32768
	IndividualEventType_AVATAR_UPDATED                 IndividualEventType = 65536
	IndividualEventType_HOME_NOTIFICATION_ITEM_EXIST   IndividualEventType = 131072
	IndividualEventType_TIMELINE_REBOOT_COMPLETED      IndividualEventType = 262144
)

func (p IndividualEventType) String() string {
	switch p {
	case IndividualEventType_NOTIFICATION_ITEM_EXIST:
		return "NOTIFICATION_ITEM_EXIST"
	case IndividualEventType_TIMELINE_ITEM_EXIST:
		return "TIMELINE_ITEM_EXIST"
	case IndividualEventType_NOTE_GROUP_NEW_ITEM_EXIST:
		return "NOTE_GROUP_NEW_ITEM_EXIST"
	case IndividualEventType_TIMELINE_BUDDYGROUP_CHANGED:
		return "TIMELINE_BUDDYGROUP_CHANGED"
	case IndividualEventType_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST:
		return "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST"
	case IndividualEventType_ALBUM_ITEM_EXIST:
		return "ALBUM_ITEM_EXIST"
	case IndividualEventType_TIMELINE_ITEM_DELETED:
		return "TIMELINE_ITEM_DELETED"
	case IndividualEventType_OTOGROUP_ITEM_EXIST:
		return "OTOGROUP_ITEM_EXIST"
	case IndividualEventType_GROUPHOME_NEW_ITEM_EXIST:
		return "GROUPHOME_NEW_ITEM_EXIST"
	case IndividualEventType_GROUPHOME_HIDDEN_ITEM_CHANGED:
		return "GROUPHOME_HIDDEN_ITEM_CHANGED"
	case IndividualEventType_NOTIFICATION_ITEM_CHANGED:
		return "NOTIFICATION_ITEM_CHANGED"
	case IndividualEventType_BEAD_ITEM_HIDE:
		return "BEAD_ITEM_HIDE"
	case IndividualEventType_BEAD_ITEM_SHOW:
		return "BEAD_ITEM_SHOW"
	case IndividualEventType_LINE_TICKET_UPDATED:
		return "LINE_TICKET_UPDATED"
	case IndividualEventType_TIMELINE_STORY_UPDATED:
		return "TIMELINE_STORY_UPDATED"
	case IndividualEventType_SMARTCH_UPDATED:
		return "SMARTCH_UPDATED"
	case IndividualEventType_AVATAR_UPDATED:
		return "AVATAR_UPDATED"
	case IndividualEventType_HOME_NOTIFICATION_ITEM_EXIST:
		return "HOME_NOTIFICATION_ITEM_EXIST"
	case IndividualEventType_TIMELINE_REBOOT_COMPLETED:
		return "TIMELINE_REBOOT_COMPLETED"
	}
	return "<UNSET>"
}

func IndividualEventTypeFromString(s string) (IndividualEventType, error) {
	switch s {
	case "NOTIFICATION_ITEM_EXIST":
		return IndividualEventType_NOTIFICATION_ITEM_EXIST, nil
	case "TIMELINE_ITEM_EXIST":
		return IndividualEventType_TIMELINE_ITEM_EXIST, nil
	case "NOTE_GROUP_NEW_ITEM_EXIST":
		return IndividualEventType_NOTE_GROUP_NEW_ITEM_EXIST, nil
	case "TIMELINE_BUDDYGROUP_CHANGED":
		return IndividualEventType_TIMELINE_BUDDYGROUP_CHANGED, nil
	case "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST":
		return IndividualEventType_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST, nil
	case "ALBUM_ITEM_EXIST":
		return IndividualEventType_ALBUM_ITEM_EXIST, nil
	case "TIMELINE_ITEM_DELETED":
		return IndividualEventType_TIMELINE_ITEM_DELETED, nil
	case "OTOGROUP_ITEM_EXIST":
		return IndividualEventType_OTOGROUP_ITEM_EXIST, nil
	case "GROUPHOME_NEW_ITEM_EXIST":
		return IndividualEventType_GROUPHOME_NEW_ITEM_EXIST, nil
	case "GROUPHOME_HIDDEN_ITEM_CHANGED":
		return IndividualEventType_GROUPHOME_HIDDEN_ITEM_CHANGED, nil
	case "NOTIFICATION_ITEM_CHANGED":
		return IndividualEventType_NOTIFICATION_ITEM_CHANGED, nil
	case "BEAD_ITEM_HIDE":
		return IndividualEventType_BEAD_ITEM_HIDE, nil
	case "BEAD_ITEM_SHOW":
		return IndividualEventType_BEAD_ITEM_SHOW, nil
	case "LINE_TICKET_UPDATED":
		return IndividualEventType_LINE_TICKET_UPDATED, nil
	case "TIMELINE_STORY_UPDATED":
		return IndividualEventType_TIMELINE_STORY_UPDATED, nil
	case "SMARTCH_UPDATED":
		return IndividualEventType_SMARTCH_UPDATED, nil
	case "AVATAR_UPDATED":
		return IndividualEventType_AVATAR_UPDATED, nil
	case "HOME_NOTIFICATION_ITEM_EXIST":
		return IndividualEventType_HOME_NOTIFICATION_ITEM_EXIST, nil
	case "TIMELINE_REBOOT_COMPLETED":
		return IndividualEventType_TIMELINE_REBOOT_COMPLETED, nil
	}
	return IndividualEventType(0), fmt.Errorf("not a valid IndividualEventType string")
}

func IndividualEventTypePtr(v IndividualEventType) *IndividualEventType { return &v }

func (p IndividualEventType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *IndividualEventType) UnmarshalText(text []byte) error {
	q, err := IndividualEventTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *IndividualEventType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = IndividualEventType(v)
	return nil
}

func (p *IndividualEventType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - TargetUserMids
//  - NeededContactCalendarEvents
type GetContactsV2Request struct {
	TargetUserMids              []string `thrift:"targetUserMids,1" db:"targetUserMids" json:"targetUserMids"`
	NeededContactCalendarEvents []int32  `thrift:"neededContactCalendarEvents,2" db:"neededContactCalendarEvents" json:"neededContactCalendarEvents"`
}

func NewGetContactsV2Request() *GetContactsV2Request {
	return &GetContactsV2Request{}
}

func (p *GetContactsV2Request) GetTargetUserMids() []string {
	return p.TargetUserMids
}

func (p *GetContactsV2Request) GetNeededContactCalendarEvents() []int32 {
	return p.NeededContactCalendarEvents
}
func (p *GetContactsV2Request) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetContactsV2Request) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TargetUserMids = tSlice
	for i := 0; i < size; i++ {
		var _elem6 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem6 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem6)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetContactsV2Request) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int32, 0, size)
	p.NeededContactCalendarEvents = tSet
	for i := 0; i < size; i++ {
		var _elem7 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.NeededContactCalendarEvents = append(p.NeededContactCalendarEvents, _elem7)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GetContactsV2Request) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetContactsV2Request"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetContactsV2Request) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:targetUserMids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:targetUserMids: ", p), err)
	}
	return err
}

func (p *GetContactsV2Request) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "neededContactCalendarEvents", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:neededContactCalendarEvents: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.NeededContactCalendarEvents)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.NeededContactCalendarEvents); i++ {
		for j := i + 1; j < len(p.NeededContactCalendarEvents); j++ {
			if reflect.DeepEqual(p.NeededContactCalendarEvents[i], p.NeededContactCalendarEvents[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.NeededContactCalendarEvents[i]))
			}
		}
	}
	for _, v := range p.NeededContactCalendarEvents {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:neededContactCalendarEvents: ", p), err)
	}
	return err
}

func (p *GetContactsV2Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactsV2Request(%+v)", *p)
}

// Attributes:
//  - Contacts
type GetContactsV2Response struct {
	Contacts map[string]*ContactEntry `thrift:"contacts,1" db:"contacts" json:"contacts"`
}

func NewGetContactsV2Response() *GetContactsV2Response {
	return &GetContactsV2Response{}
}

func (p *GetContactsV2Response) GetContacts() map[string]*ContactEntry {
	return p.Contacts
}
func (p *GetContactsV2Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetContactsV2Response) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ContactEntry, size)
	p.Contacts = tMap
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key8 = v
		}
		_val9 := &ContactEntry{}
		if err := _val9.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val9), err)
		}
		p.Contacts[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GetContactsV2Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetContactsV2Response"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetContactsV2Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "contacts", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contacts: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRUCT, len(p.Contacts)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Contacts {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contacts: ", p), err)
	}
	return err
}

func (p *GetContactsV2Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetContactsV2Response(%+v)", *p)
}

// Attributes:
//  - ID
//  - State
//  - Year
//  - Month
//  - Day
type ContactCalendarEvent struct {
	ID    string `thrift:"id,1" db:"id" json:"id"`
	State int32  `thrift:"state,2" db:"state" json:"state"`
	Year  int32  `thrift:"year,3" db:"year" json:"year"`
	Month int32  `thrift:"month,4" db:"month" json:"month"`
	Day   int32  `thrift:"day,5" db:"day" json:"day"`
}

func NewContactCalendarEvent() *ContactCalendarEvent {
	return &ContactCalendarEvent{}
}

func (p *ContactCalendarEvent) GetID() string {
	return p.ID
}

func (p *ContactCalendarEvent) GetState() int32 {
	return p.State
}

func (p *ContactCalendarEvent) GetYear() int32 {
	return p.Year
}

func (p *ContactCalendarEvent) GetMonth() int32 {
	return p.Month
}

func (p *ContactCalendarEvent) GetDay() int32 {
	return p.Day
}
func (p *ContactCalendarEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactCalendarEvent) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ContactCalendarEvent) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *ContactCalendarEvent) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Year = v
	}
	return nil
}

func (p *ContactCalendarEvent) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Month = v
	}
	return nil
}

func (p *ContactCalendarEvent) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Day = v
	}
	return nil
}

func (p *ContactCalendarEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ContactCalendarEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactCalendarEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:state: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.state (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:state: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvent) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "year", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:year: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Year)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.year (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:year: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvent) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "month", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:month: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Month)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.month (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:month: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "day", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Day)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactCalendarEvent(%+v)", *p)
}

// Attributes:
//  - Events
type ContactCalendarEvents struct {
	Events map[int32]*ContactCalendarEvent `thrift:"events,1" db:"events" json:"events"`
}

func NewContactCalendarEvents() *ContactCalendarEvents {
	return &ContactCalendarEvents{}
}

func (p *ContactCalendarEvents) GetEvents() map[int32]*ContactCalendarEvent {
	return p.Events
}
func (p *ContactCalendarEvents) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactCalendarEvents) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]*ContactCalendarEvent, size)
	p.Events = tMap
	for i := 0; i < size; i++ {
		var _key12 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key12 = v
		}
		_val13 := &ContactCalendarEvent{}
		if err := _val13.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val13), err)
		}
		p.Events[_key12] = _val13
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ContactCalendarEvents) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ContactCalendarEvents"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactCalendarEvents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "events", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Events)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Events {
		if err := oprot.WriteI32(ctx, int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err)
	}
	return err
}

func (p *ContactCalendarEvents) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactCalendarEvents(%+v)", *p)
}

// Attributes:
//  - UserStatus
//  - SnapshotTimeMillis
//  - Contact
//  - CalendarEvents
type ContactEntry struct {
	UserStatus         int32                  `thrift:"userStatus,1" db:"userStatus" json:"userStatus"`
	SnapshotTimeMillis int64                  `thrift:"snapshotTimeMillis,2" db:"snapshotTimeMillis" json:"snapshotTimeMillis"`
	Contact            *Contact               `thrift:"contact,3" db:"contact" json:"contact"`
	CalendarEvents     *ContactCalendarEvents `thrift:"calendarEvents,4" db:"calendarEvents" json:"calendarEvents"`
}

func NewContactEntry() *ContactEntry {
	return &ContactEntry{}
}

func (p *ContactEntry) GetUserStatus() int32 {
	return p.UserStatus
}

func (p *ContactEntry) GetSnapshotTimeMillis() int64 {
	return p.SnapshotTimeMillis
}

var ContactEntry_Contact_DEFAULT *Contact

func (p *ContactEntry) GetContact() *Contact {
	if !p.IsSetContact() {
		return ContactEntry_Contact_DEFAULT
	}
	return p.Contact
}

var ContactEntry_CalendarEvents_DEFAULT *ContactCalendarEvents

func (p *ContactEntry) GetCalendarEvents() *ContactCalendarEvents {
	if !p.IsSetCalendarEvents() {
		return ContactEntry_CalendarEvents_DEFAULT
	}
	return p.CalendarEvents
}
func (p *ContactEntry) IsSetContact() bool {
	return p.Contact != nil
}

func (p *ContactEntry) IsSetCalendarEvents() bool {
	return p.CalendarEvents != nil
}

func (p *ContactEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ContactEntry) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserStatus = v
	}
	return nil
}

func (p *ContactEntry) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnapshotTimeMillis = v
	}
	return nil
}

func (p *ContactEntry) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Contact = &Contact{}
	if err := p.Contact.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *ContactEntry) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.CalendarEvents = &ContactCalendarEvents{}
	if err := p.CalendarEvents.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CalendarEvents), err)
	}
	return nil
}

func (p *ContactEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ContactEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ContactEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userStatus", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userStatus: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UserStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userStatus (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userStatus: ", p), err)
	}
	return err
}

func (p *ContactEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "snapshotTimeMillis", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snapshotTimeMillis: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.SnapshotTimeMillis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.snapshotTimeMillis (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snapshotTimeMillis: ", p), err)
	}
	return err
}

func (p *ContactEntry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "contact", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contact: ", p), err)
	}
	if err := p.Contact.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contact: ", p), err)
	}
	return err
}

func (p *ContactEntry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "calendarEvents", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:calendarEvents: ", p), err)
	}
	if err := p.CalendarEvents.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CalendarEvents), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:calendarEvents: ", p), err)
	}
	return err
}

func (p *ContactEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactEntry(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Type           int32    `thrift:"type,2" db:"type" json:"type"`
	Name           string   `thrift:"name,3" db:"name" json:"name"`
	TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
	PicturePath    string   `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
	return &CreateChatRequest{}
}

func (p *CreateChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CreateChatRequest) GetType() int32 {
	return p.Type
}

func (p *CreateChatRequest) GetName() string {
	return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
	return p.PicturePath
}
func (p *CreateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateChatRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CreateChatRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *CreateChatRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CreateChatRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem2)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *CreateChatRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *CreateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CreateChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err)
	}
	return err
}

func (p *CreateChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
	Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
	return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat

func (p *CreateChatResponse) GetChat() *Chat {
	if !p.IsSetChat() {
		return CreateChatResponse_Chat_DEFAULT
	}
	return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
	return p.Chat != nil
}

func (p *CreateChatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CreateChatResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *CreateChatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CreateChatResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CreateChatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err)
	}
	if err := p.Chat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err)
	}
	return err
}

func (p *CreateChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
	Type                 int32  `thrift:"type,1" db:"type" json:"type"`
	ChatMid              string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	CreatedTime          int64  `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
	NotificationDisabled bool   `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
	FavoriteTimestamp    int64  `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
	ChatName             string `thrift:"chatName,6" db:"chatName" json:"chatName"`
	PicturePath          string `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
	Extra                *Extra `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
	return &Chat{}
}

func (p *Chat) GetType() int32 {
	return p.Type
}

func (p *Chat) GetChatMid() string {
	return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
	return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
	return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
	return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
	return p.ChatName
}

func (p *Chat) GetPicturePath() string {
	return p.PicturePath
}

var Chat_Extra_DEFAULT *Extra

func (p *Chat) GetExtra() *Extra {
	if !p.IsSetExtra() {
		return Chat_Extra_DEFAULT
	}
	return p.Extra
}
func (p *Chat) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *Chat) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Chat) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *Chat) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *Chat) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CreatedTime = v
	}
	return nil
}

func (p *Chat) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NotificationDisabled = v
	}
	return nil
}

func (p *Chat) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FavoriteTimestamp = v
	}
	return nil
}

func (p *Chat) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ChatName = v
	}
	return nil
}

func (p *Chat) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PicturePath = v
	}
	return nil
}

func (p *Chat) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p.Extra = &Extra{}
	if err := p.Extra.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
	}
	return nil
}

func (p *Chat) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Chat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField8(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Chat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *Chat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *Chat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "createdTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CreatedTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err)
	}
	return err
}

func (p *Chat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "notificationDisabled", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.NotificationDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err)
	}
	return err
}

func (p *Chat) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "favoriteTimestamp", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.FavoriteTimestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err)
	}
	return err
}

func (p *Chat) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatName", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err)
	}
	return err
}

func (p *Chat) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "picturePath", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.PicturePath)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err)
	}
	return err
}

func (p *Chat) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err)
	}
	if err := p.Extra.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err)
	}
	return err
}

func (p *Chat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - GroupExtra
type Extra struct {
	GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
}

func NewExtra() *Extra {
	return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra

func (p *Extra) GetGroupExtra() *GroupExtra {
	if !p.IsSetGroupExtra() {
		return Extra_GroupExtra_DEFAULT
	}
	return p.GroupExtra
}
func (p *Extra) IsSetGroupExtra() bool {
	return p.GroupExtra != nil
}

func (p *Extra) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Extra) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.GroupExtra = &GroupExtra{}
	if err := p.GroupExtra.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
	}
	return nil
}

func (p *Extra) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Extra"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Extra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groupExtra", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err)
	}
	if err := p.GroupExtra.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err)
	}
	return err
}

func (p *Extra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
//  - AddFriendDisabled
//  - TicketDisabled
type GroupExtra struct {
	Creator               string           `thrift:"creator,1" db:"creator" json:"creator"`
	PreventedJoinByTicket bool             `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
	InvitationTicket      string           `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
	MemberMids            map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
	InviteeMids           map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
	AddFriendDisabled     bool             `thrift:"addFriendDisabled,6" db:"addFriendDisabled" json:"addFriendDisabled"`
	TicketDisabled        bool             `thrift:"ticketDisabled,7" db:"ticketDisabled" json:"ticketDisabled"`
}

func NewGroupExtra() *GroupExtra {
	return &GroupExtra{}
}

func (p *GroupExtra) GetCreator() string {
	return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
	return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
	return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
	return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
	return p.InviteeMids
}

func (p *GroupExtra) GetAddFriendDisabled() bool {
	return p.AddFriendDisabled
}

func (p *GroupExtra) GetTicketDisabled() bool {
	return p.TicketDisabled
}
func (p *GroupExtra) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GroupExtra) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Creator = v
	}
	return nil
}

func (p *GroupExtra) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PreventedJoinByTicket = v
	}
	return nil
}

func (p *GroupExtra) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.InvitationTicket = v
	}
	return nil
}

func (p *GroupExtra) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.MemberMids = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.MemberMids[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupExtra) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.InviteeMids = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key5 = v
		}
		var _val6 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.InviteeMids[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *GroupExtra) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.AddFriendDisabled = v
	}
	return nil
}

func (p *GroupExtra) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TicketDisabled = v
	}
	return nil
}

func (p *GroupExtra) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GroupExtra"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField7(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GroupExtra) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Creator)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "preventedJoinByTicket", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.PreventedJoinByTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invitationTicket", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.InvitationTicket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "memberMids", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.MemberMids {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "inviteeMids", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.InviteeMids {
		if err := oprot.WriteString(ctx, string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "addFriendDisabled", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:addFriendDisabled: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.AddFriendDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addFriendDisabled (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:addFriendDisabled: ", p), err)
	}
	return err
}

func (p *GroupExtra) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ticketDisabled", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ticketDisabled: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.TicketDisabled)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketDisabled (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ticketDisabled: ", p), err)
	}
	return err
}

func (p *GroupExtra) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupExtra(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
	ReqSeq                       int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid                      string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	LastSeenMessageDeliveredTime int64  `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
	LastSeenMessageId            string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
	LastMessageDeliveredTime     int64  `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
	LastMessageId                string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
	return &DeleteSelfFromChatRequest{}
}

func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
	return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
	return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
	return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
	return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastSeenMessageDeliveredTime = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LastSeenMessageId = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LastMessageDeliveredTime = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LastMessageId = v
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DeleteSelfFromChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.LastSeenMessageDeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastSeenMessageId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LastSeenMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastMessageDeliveredTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.LastMessageDeliveredTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastMessageId", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.LastMessageId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err)
	}
	return err
}

func (p *DeleteSelfFromChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
	return &DeleteOtherFromChatRequest{}
}

func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem7)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "DeleteOtherFromChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *DeleteOtherFromChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
	return &InviteIntoChatRequest{}
}

func (p *InviteIntoChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *InviteIntoChatRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem8 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem8 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem8)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *InviteIntoChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "InviteIntoChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InviteIntoChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *InviteIntoChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
	return &AcceptChatInvitationRequest{}
}

func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AcceptChatInvitationRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AcceptChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TicketId
type AcceptChatInvitationByTicketRequest struct {
	ReqSeq   int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid  string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewAcceptChatInvitationByTicketRequest() *AcceptChatInvitationByTicketRequest {
	return &AcceptChatInvitationByTicketRequest{}
}

func (p *AcceptChatInvitationByTicketRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AcceptChatInvitationByTicketRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *AcceptChatInvitationByTicketRequest) GetTicketId() string {
	return p.TicketId
}
func (p *AcceptChatInvitationByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AcceptChatInvitationByTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AcceptChatInvitationByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err)
	}
	return err
}

func (p *AcceptChatInvitationByTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AcceptChatInvitationByTicketRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
	ReqSeq  int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
	return &RejectChatInvitationRequest{}
}

func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RejectChatInvitationRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *RejectChatInvitationRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *RejectChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RejectChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RejectChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *RejectChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *RejectChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
	ReqSeq         int32    `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	ChatMid        string   `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
	TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
	return &CancelChatInvitationRequest{}
}

func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
	return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
	return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *CancelChatInvitationRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.TargetUserMids = tSet
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.TargetUserMids = append(p.TargetUserMids, _elem9)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "CancelChatInvitationRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CancelChatInvitationRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetUserMids", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.TargetUserMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.TargetUserMids); i++ {
		for j := i + 1; j < len(p.TargetUserMids); j++ {
			if reflect.DeepEqual(p.TargetUserMids[i], p.TargetUserMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
			}
		}
	}
	for _, v := range p.TargetUserMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err)
	}
	return err
}

func (p *CancelChatInvitationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
	ReqSeq   int32  `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
	return &ReissueChatTicketRequest{}
}

func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
	return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReissueChatTicketRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *ReissueChatTicketRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GroupMid = v
	}
	return nil
}

func (p *ReissueChatTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReissueChatTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groupMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.GroupMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
	TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
	return &ReissueChatTicketResponse{}
}

func (p *ReissueChatTicketResponse) GetTicketId() string {
	return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReissueChatTicketResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *ReissueChatTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ReissueChatTicketResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReissueChatTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *ReissueChatTicketResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
	ReqSeq           int32               `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	Chat             *Chat               `thrift:"chat,2" db:"chat" json:"chat"`
	UpdatedAttribute UpdateAttributeType `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
	return &UpdateChatRequest{}
}

func (p *UpdateChatRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

var UpdateChatRequest_Chat_DEFAULT *Chat

func (p *UpdateChatRequest) GetChat() *Chat {
	if !p.IsSetChat() {
		return UpdateChatRequest_Chat_DEFAULT
	}
	return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() UpdateAttributeType {
	return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
	return p.Chat != nil
}

func (p *UpdateChatRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UpdateChatRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *UpdateChatRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *UpdateChatRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := UpdateAttributeType(v)
		p.UpdatedAttribute = temp
	}
	return nil
}

func (p *UpdateChatRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "UpdateChatRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UpdateChatRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err)
	}
	if err := p.Chat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updatedAttribute", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.UpdatedAttribute)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err)
	}
	return err
}

func (p *UpdateChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - ChatMids
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
	ChatMids     []string `thrift:"chatMids,1" db:"chatMids" json:"chatMids"`
	WithMembers  bool     `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
	WithInvitees bool     `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
	return &GetChatsRequest{}
}

func (p *GetChatsRequest) GetChatMids() []string {
	return p.ChatMids
}

func (p *GetChatsRequest) GetWithMembers() bool {
	return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
	return p.WithInvitees
}
func (p *GetChatsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChatsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ChatMids = tSlice
	for i := 0; i < size; i++ {
		var _elem10 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.ChatMids = append(p.ChatMids, _elem10)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChatsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WithMembers = v
	}
	return nil
}

func (p *GetChatsRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WithInvitees = v
	}
	return nil
}

func (p *GetChatsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetChatsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChatsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMids", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMids: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ChatMids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ChatMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMids: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "withMembers", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.WithMembers)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "withInvitees", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.WithInvitees)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err)
	}
	return err
}

func (p *GetChatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
	Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
	return &GetChatsResponse{}
}

func (p *GetChatsResponse) GetChats() []*Chat {
	return p.Chats
}
func (p *GetChatsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetChatsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Chat, 0, size)
	p.Chats = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &Chat{}
		if err := _elem11.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Chats = append(p.Chats, _elem11)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetChatsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetChatsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetChatsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chats", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Chats)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Chats {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err)
	}
	return err
}

func (p *GetChatsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - TicketId
type FindChatByTicketRequest struct {
	TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewFindChatByTicketRequest() *FindChatByTicketRequest {
	return &FindChatByTicketRequest{}
}

func (p *FindChatByTicketRequest) GetTicketId() string {
	return p.TicketId
}
func (p *FindChatByTicketRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FindChatByTicketRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TicketId = v
	}
	return nil
}

func (p *FindChatByTicketRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FindChatByTicketRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FindChatByTicketRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ticketId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.TicketId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err)
	}
	return err
}

func (p *FindChatByTicketRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindChatByTicketRequest(%+v)", *p)
}

// Attributes:
//  - Chat
type FindChatByTicketResponse struct {
	Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewFindChatByTicketResponse() *FindChatByTicketResponse {
	return &FindChatByTicketResponse{}
}

var FindChatByTicketResponse_Chat_DEFAULT *Chat

func (p *FindChatByTicketResponse) GetChat() *Chat {
	if !p.IsSetChat() {
		return FindChatByTicketResponse_Chat_DEFAULT
	}
	return p.Chat
}
func (p *FindChatByTicketResponse) IsSetChat() bool {
	return p.Chat != nil
}

func (p *FindChatByTicketResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FindChatByTicketResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Chat = &Chat{}
	if err := p.Chat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
	}
	return nil
}

func (p *FindChatByTicketResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FindChatByTicketResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FindChatByTicketResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chat", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err)
	}
	if err := p.Chat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err)
	}
	return err
}

func (p *FindChatByTicketResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindChatByTicketResponse(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
	WithMemberChats  bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
	WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
	return &GetAllChatMidsRequest{}
}

func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
	return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
	return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAllChatMidsRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.WithMemberChats = v
	}
	return nil
}

func (p *GetAllChatMidsRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.WithInvitedChats = v
	}
	return nil
}

func (p *GetAllChatMidsRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAllChatMidsRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "withMemberChats", thrift.BOOL, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.WithMemberChats)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "withInvitedChats", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.WithInvitedChats)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - MemberChatMids
//  - InvitedChatMids
type GetAllChatMidsResponse struct {
	MemberChatMids  []string `thrift:"memberChatMids,1" db:"memberChatMids" json:"memberChatMids"`
	InvitedChatMids []string `thrift:"invitedChatMids,2" db:"invitedChatMids" json:"invitedChatMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
	return &GetAllChatMidsResponse{}
}

func (p *GetAllChatMidsResponse) GetMemberChatMids() []string {
	return p.MemberChatMids
}

func (p *GetAllChatMidsResponse) GetInvitedChatMids() []string {
	return p.InvitedChatMids
}
func (p *GetAllChatMidsResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.MemberChatMids = tSet
	for i := 0; i < size; i++ {
		var _elem12 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem12 = v
		}
		p.MemberChatMids = append(p.MemberChatMids, _elem12)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.InvitedChatMids = tSet
	for i := 0; i < size; i++ {
		var _elem13 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem13 = v
		}
		p.InvitedChatMids = append(p.InvitedChatMids, _elem13)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetAllChatMidsResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetAllChatMidsResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "memberChatMids", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberChatMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.MemberChatMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.MemberChatMids); i++ {
		for j := i + 1; j < len(p.MemberChatMids); j++ {
			if reflect.DeepEqual(p.MemberChatMids[i], p.MemberChatMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberChatMids[i]))
			}
		}
	}
	for _, v := range p.MemberChatMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberChatMids: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invitedChatMids", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invitedChatMids: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.InvitedChatMids)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.InvitedChatMids); i++ {
		for j := i + 1; j < len(p.InvitedChatMids); j++ {
			if reflect.DeepEqual(p.InvitedChatMids[i], p.InvitedChatMids[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InvitedChatMids[i]))
			}
		}
	}
	for _, v := range p.InvitedChatMids {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invitedChatMids: ", p), err)
	}
	return err
}

func (p *GetAllChatMidsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

// Attributes:
//  - SpaceId
//  - ObjectId
type EvidenceId struct {
	SpaceId  string `thrift:"spaceId,1" db:"spaceId" json:"spaceId"`
	ObjectId string `thrift:"objectId,2" db:"objectId" json:"objectId"`
}

func NewEvidenceId() *EvidenceId {
	return &EvidenceId{}
}

func (p *EvidenceId) GetSpaceId() string {
	return p.SpaceId
}

func (p *EvidenceId) GetObjectId() string {
	return p.ObjectId
}
func (p *EvidenceId) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EvidenceId) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SpaceId = v
	}
	return nil
}

func (p *EvidenceId) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ObjectId = v
	}
	return nil
}

func (p *EvidenceId) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "EvidenceId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EvidenceId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spaceId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:spaceId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SpaceId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.spaceId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:spaceId: ", p), err)
	}
	return err
}

func (p *EvidenceId) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "objectId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:objectId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ObjectId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.objectId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:objectId: ", p), err)
	}
	return err
}

func (p *EvidenceId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvidenceId(%+v)", *p)
}

// Attributes:
//  - ReporteeMid
//  - SpammerReasons
//  - EvidenceIds
//  - ChatMid
type AbuseReportLineMeeting struct {
	ReporteeMid    string        `thrift:"reporteeMid,1" db:"reporteeMid" json:"reporteeMid"`
	SpammerReasons []string      `thrift:"spammerReasons,2" db:"spammerReasons" json:"spammerReasons"`
	EvidenceIds    []*EvidenceId `thrift:"evidenceIds,3" db:"evidenceIds" json:"evidenceIds"`
	ChatMid        string        `thrift:"chatMid,4" db:"chatMid" json:"chatMid"`
}

func NewAbuseReportLineMeeting() *AbuseReportLineMeeting {
	return &AbuseReportLineMeeting{}
}

func (p *AbuseReportLineMeeting) GetReporteeMid() string {
	return p.ReporteeMid
}

func (p *AbuseReportLineMeeting) GetSpammerReasons() []string {
	return p.SpammerReasons
}

func (p *AbuseReportLineMeeting) GetEvidenceIds() []*EvidenceId {
	return p.EvidenceIds
}

func (p *AbuseReportLineMeeting) GetChatMid() string {
	return p.ChatMid
}
func (p *AbuseReportLineMeeting) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AbuseReportLineMeeting) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReporteeMid = v
	}
	return nil
}

func (p *AbuseReportLineMeeting) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.SpammerReasons = tSlice
	for i := 0; i < size; i++ {
		var _elem14 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.SpammerReasons = append(p.SpammerReasons, _elem14)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AbuseReportLineMeeting) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EvidenceId, 0, size)
	p.EvidenceIds = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &EvidenceId{}
		if err := _elem15.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.EvidenceIds = append(p.EvidenceIds, _elem15)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AbuseReportLineMeeting) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AbuseReportLineMeeting) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AbuseReportLineMeeting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AbuseReportLineMeeting) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reporteeMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reporteeMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ReporteeMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reporteeMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reporteeMid: ", p), err)
	}
	return err
}

func (p *AbuseReportLineMeeting) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "spammerReasons", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spammerReasons: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.SpammerReasons)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SpammerReasons {
		if err := oprot.WriteString(ctx, string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spammerReasons: ", p), err)
	}
	return err
}

func (p *AbuseReportLineMeeting) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "evidenceIds", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evidenceIds: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.EvidenceIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EvidenceIds {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evidenceIds: ", p), err)
	}
	return err
}

func (p *AbuseReportLineMeeting) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:chatMid: ", p), err)
	}
	return err
}

func (p *AbuseReportLineMeeting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbuseReportLineMeeting(%+v)", *p)
}

// Attributes:
//  - Message
//  - LineMeeting
type AbuseReportEntry struct {
	Message     string                  `thrift:"message,1" db:"message" json:"message"`
	LineMeeting *AbuseReportLineMeeting `thrift:"lineMeeting,2" db:"lineMeeting" json:"lineMeeting"`
}

func NewAbuseReportEntry() *AbuseReportEntry {
	return &AbuseReportEntry{}
}

func (p *AbuseReportEntry) GetMessage() string {
	return p.Message
}

var AbuseReportEntry_LineMeeting_DEFAULT *AbuseReportLineMeeting

func (p *AbuseReportEntry) GetLineMeeting() *AbuseReportLineMeeting {
	if !p.IsSetLineMeeting() {
		return AbuseReportEntry_LineMeeting_DEFAULT
	}
	return p.LineMeeting
}
func (p *AbuseReportEntry) IsSetLineMeeting() bool {
	return p.LineMeeting != nil
}

func (p *AbuseReportEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AbuseReportEntry) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *AbuseReportEntry) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.LineMeeting = &AbuseReportLineMeeting{}
	if err := p.LineMeeting.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LineMeeting), err)
	}
	return nil
}

func (p *AbuseReportEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AbuseReportEntry"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AbuseReportEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *AbuseReportEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lineMeeting", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lineMeeting: ", p), err)
	}
	if err := p.LineMeeting.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LineMeeting), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lineMeeting: ", p), err)
	}
	return err
}

func (p *AbuseReportEntry) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AbuseReportEntry(%+v)", *p)
}

// Attributes:
//  - AbuseReportEntry
type ReportAbuseExRequest struct {
	AbuseReportEntry *AbuseReportEntry `thrift:"abuseReportEntry,1" db:"abuseReportEntry" json:"abuseReportEntry"`
}

func NewReportAbuseExRequest() *ReportAbuseExRequest {
	return &ReportAbuseExRequest{}
}

var ReportAbuseExRequest_AbuseReportEntry_DEFAULT *AbuseReportEntry

func (p *ReportAbuseExRequest) GetAbuseReportEntry() *AbuseReportEntry {
	if !p.IsSetAbuseReportEntry() {
		return ReportAbuseExRequest_AbuseReportEntry_DEFAULT
	}
	return p.AbuseReportEntry
}
func (p *ReportAbuseExRequest) IsSetAbuseReportEntry() bool {
	return p.AbuseReportEntry != nil
}

func (p *ReportAbuseExRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ReportAbuseExRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.AbuseReportEntry = &AbuseReportEntry{}
	if err := p.AbuseReportEntry.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AbuseReportEntry), err)
	}
	return nil
}

func (p *ReportAbuseExRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ReportAbuseExRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ReportAbuseExRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "abuseReportEntry", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:abuseReportEntry: ", p), err)
	}
	if err := p.AbuseReportEntry.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AbuseReportEntry), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:abuseReportEntry: ", p), err)
	}
	return err
}

func (p *ReportAbuseExRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportAbuseExRequest(%+v)", *p)
}

func (p *TalkServiceClient) Client_() thrift.TClient {
	return p.c
}

// Parameters:
//  - AttributesToRetrieve
func (p *TalkServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []int8) (r *Settings, err error) {
	var _args14 TalkServiceGetSettingsAttributes2Args
	_args14.AttributesToRetrieve = attributesToRetrieve
	var _result15 TalkServiceGetSettingsAttributes2Result
	if _, err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args14, &_result15); err != nil {
		return
	}
	switch {
	case _result15.E != nil:
		return r, _result15.E
	}

	return _result15.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetContactsV2(ctx context.Context, request *GetContactsV2Request, syncReason SyncReason) (r *GetContactsV2Response, err error) {
	var _args12 TalkServiceGetContactsV2Args
	_args12.Request = request
	_args12.SyncReason = syncReason
	var _result13 TalkServiceGetContactsV2Result
	if _, err = p.Client_().Call(ctx, "getContactsV2", &_args12, &_result13); err != nil {
		return
	}
	switch {
	case _result13.E != nil:
		return r, _result13.E
	}

	return _result13.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CreateChat(ctx context.Context, request *CreateChatRequest) (r *CreateChatResponse, err error) {
	var _args14 TalkServiceCreateChatArgs
	_args14.Request = request
	var _result15 TalkServiceCreateChatResult
	if _, err = p.Client_().Call(ctx, "createChat", &_args14, &_result15); err != nil {
		return
	}
	switch {
	case _result15.E != nil:
		return r, _result15.E
	}

	return _result15.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (err error) {
	var _args16 TalkServiceDeleteSelfFromChatArgs
	_args16.Request = request
	var _result17 TalkServiceDeleteSelfFromChatResult
	if _, err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args16, &_result17); err != nil {
		return
	}
	switch {
	case _result17.E != nil:
		return _result17.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (err error) {
	var _args18 TalkServiceDeleteOtherFromChatArgs
	_args18.Request = request
	var _result19 TalkServiceDeleteOtherFromChatResult
	if _, err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args18, &_result19); err != nil {
		return
	}
	switch {
	case _result19.E != nil:
		return _result19.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (err error) {
	var _args20 TalkServiceInviteIntoChatArgs
	_args20.Request = request
	var _result21 TalkServiceInviteIntoChatResult
	if _, err = p.Client_().Call(ctx, "inviteIntoChat", &_args20, &_result21); err != nil {
		return
	}
	switch {
	case _result21.E != nil:
		return _result21.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (err error) {
	var _args22 TalkServiceAcceptChatInvitationArgs
	_args22.Request = request
	var _result23 TalkServiceAcceptChatInvitationResult
	if _, err = p.Client_().Call(ctx, "acceptChatInvitation", &_args22, &_result23); err != nil {
		return
	}
	switch {
	case _result23.E != nil:
		return _result23.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (err error) {
	var _args24 TalkServiceAcceptChatInvitationByTicketArgs
	_args24.Request = request
	var _result25 TalkServiceAcceptChatInvitationByTicketResult
	if _, err = p.Client_().Call(ctx, "acceptChatInvitationByTicket", &_args24, &_result25); err != nil {
		return
	}
	switch {
	case _result25.E != nil:
		return _result25.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (err error) {
	var _args26 TalkServiceRejectChatInvitationArgs
	_args26.Request = request
	var _result27 TalkServiceRejectChatInvitationResult
	if _, err = p.Client_().Call(ctx, "rejectChatInvitation", &_args26, &_result27); err != nil {
		return
	}
	switch {
	case _result27.E != nil:
		return _result27.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (err error) {
	var _args28 TalkServiceCancelChatInvitationArgs
	_args28.Request = request
	var _result29 TalkServiceCancelChatInvitationResult
	if _, err = p.Client_().Call(ctx, "cancelChatInvitation", &_args28, &_result29); err != nil {
		return
	}
	switch {
	case _result29.E != nil:
		return _result29.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (r *ReissueChatTicketResponse, err error) {
	var _args30 TalkServiceReissueChatTicketArgs
	_args30.Request = request
	var _result31 TalkServiceReissueChatTicketResult
	if _, err = p.Client_().Call(ctx, "reissueChatTicket", &_args30, &_result31); err != nil {
		return
	}
	switch {
	case _result31.E != nil:
		return r, _result31.E
	}

	return _result31.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (err error) {
	var _args32 TalkServiceUpdateChatArgs
	_args32.Request = request
	var _result33 TalkServiceUpdateChatResult
	if _, err = p.Client_().Call(ctx, "updateChat", &_args32, &_result33); err != nil {
		return
	}
	switch {
	case _result33.E != nil:
		return _result33.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (r *GetChatsResponse, err error) {
	var _args34 TalkServiceGetChatsArgs
	_args34.Request = request
	var _result35 TalkServiceGetChatsResult
	if _, err = p.Client_().Call(ctx, "getChats", &_args34, &_result35); err != nil {
		return
	}
	switch {
	case _result35.E != nil:
		return r, _result35.E
	}

	return _result35.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (r *FindChatByTicketResponse, err error) {
	var _args293 TalkServiceFindChatByTicketArgs
	_args293.Request = request
	var _result294 TalkServiceFindChatByTicketResult
	if _, err = p.Client_().Call(ctx, "findChatByTicket", &_args293, &_result294); err != nil {
		return
	}
	switch {
	case _result294.E != nil:
		return r, _result294.E
	}

	return _result294.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason int32) (r *GetAllChatMidsResponse, err error) {
	var _args36 TalkServiceGetAllChatMidsArgs
	_args36.Request = request
	_args36.SyncReason = syncReason
	var _result37 TalkServiceGetAllChatMidsResult
	if _, err = p.Client_().Call(ctx, "getAllChatMids", &_args36, &_result37); err != nil {
		return
	}
	switch {
	case _result37.E != nil:
		return r, _result37.E
	}

	return _result37.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReportAbuseEx(ctx context.Context, request *ReportAbuseExRequest) (err error) {
	var _args42 TalkServiceReportAbuseExArgs
	_args42.Request = request
	var _result43 TalkServiceReportAbuseExResult
	if _, err = p.c.Call(ctx, "reportAbuseEx", &_args42, &_result43); err != nil {
		return
	}
	switch {
	case _result43.E != nil:
		return _result43.E
	}

	return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) Sync(ctx context.Context, request *SyncRequest) (r *SyncResponse, err error) {
	var _args46 TalkServiceSyncArgs
	_args46.Request = request
	var _result47 TalkServiceSyncResult
	if _, err = p.c.Call(ctx, "sync", &_args46, &_result47); err != nil {
		return
	}
	switch {
	case _result47.E != nil:
		return r, _result47.E
	}

	return _result47.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetPreviousMessageIds(ctx context.Context, request *GetPreviousMessageIdsRequest) (_r *GetPreviousMessageIdsResponse, _err error) {
	var _args99 TalkServiceGetPreviousMessageIdsArgs
	_args99.Request = request
	var _result101 TalkServiceGetPreviousMessageIdsResult
	if _, _err = p.Client_().Call(ctx, "getPreviousMessageIds", &_args99, &_result101); _err != nil {
		return
	}
	switch {
	case _result101.E != nil:
		return _r, _result101.E
	}

	if _ret102 := _result101.GetSuccess(); _ret102 != nil {
		return _ret102, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getPreviousMessageIds failed: unknown result")
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type TalkServiceCreateChatArgs struct {
	Request *CreateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
	return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Request_DEFAULT *CreateChatRequest

func (p *TalkServiceCreateChatArgs) GetRequest() *CreateChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceCreateChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceCreateChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceCreateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &CreateChatRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceCreateChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
	Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException      `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
	return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse

func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
	if !p.IsSetSuccess() {
		return TalkServiceCreateChatResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceCreateChatResult_E_DEFAULT *TalkException

func (p *TalkServiceCreateChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCreateChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &CreateChatResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "createChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCreateChatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCreateChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
	Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
	return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest

func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &DeleteSelfFromChatRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
	return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException

func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteSelfFromChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
	Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
	return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest

func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &DeleteOtherFromChatRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
	return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException

func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "deleteOtherFromChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
	Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
	return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest

func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceInviteIntoChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &InviteIntoChatRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoChatResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
	return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException

func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceInviteIntoChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "inviteIntoChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
	Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
	return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest

func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &AcceptChatInvitationRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptChatInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
	return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "acceptChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationByTicketArgs struct {
	Request *AcceptChatInvitationByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationByTicketArgs() *TalkServiceAcceptChatInvitationByTicketArgs {
	return &TalkServiceAcceptChatInvitationByTicketArgs{}
}

var TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT *AcceptChatInvitationByTicketRequest

func (p *TalkServiceAcceptChatInvitationByTicketArgs) GetRequest() *AcceptChatInvitationByTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceAcceptChatInvitationByTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &AcceptChatInvitationByTicketRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptChatInvitationByTicketResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationByTicketResult() *TalkServiceAcceptChatInvitationByTicketResult {
	return &TalkServiceAcceptChatInvitationByTicketResult{}
}

var TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceAcceptChatInvitationByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "acceptChatInvitationByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
	Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
	return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest

func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &RejectChatInvitationRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRejectChatInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
	return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceRejectChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "rejectChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
	Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
	return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest

func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
	if !p.IsSetRequest() {
		return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &CancelChatInvitationRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCancelChatInvitationResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
	return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException

func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceCancelChatInvitationResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "cancelChatInvitation_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
	Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
	return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest

func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceReissueChatTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &ReissueChatTicketRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
	Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException             `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
	return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse

func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
	if !p.IsSetSuccess() {
		return TalkServiceReissueChatTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReissueChatTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &ReissueChatTicketResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reissueChatTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
	Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
	return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest

func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
	if !p.IsSetRequest() {
		return TalkServiceUpdateChatArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &UpdateChatRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateChat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateChatResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
	return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_E_DEFAULT *TalkException

func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceUpdateChatResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateChat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceUpdateChatResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceUpdateChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
	Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
	return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest

func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetChatsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetChatsRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getChats_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetChatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
	Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException    `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
	return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse

func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetChatsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetChatsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetChatsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetChatsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetChatsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getChats_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetChatsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetChatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
	Request    *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
	SyncReason int32                  `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
	return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest

func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() int32 {
	return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetAllChatMidsRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SyncReason = v
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getAllChatMids_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
	Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException          `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
	return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse

func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetAllChatMidsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetAllChatMidsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetAllChatMidsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getAllChatMids_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type TalkServiceGetSettingsAttributes2Args struct {
	// unused field # 1
	AttributesToRetrieve []int8 `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
	return &TalkServiceGetSettingsAttributes2Args{}
}

func (p *TalkServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []int8 {
	return p.AttributesToRetrieve
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int8, 0, size)
	p.AttributesToRetrieve = tSet
	for i := 0; i < size; i++ {
		var _elem42 int8
		if v, err := iprot.ReadByte(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem42 = int8(v)
		}
		p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem42)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "attributesToRetrieve", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.BYTE, len(p.AttributesToRetrieve)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.AttributesToRetrieve); i++ {
		for j := i + 1; j < len(p.AttributesToRetrieve); j++ {
			if reflect.DeepEqual(p.AttributesToRetrieve[i], p.AttributesToRetrieve[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve[i]))
			}
		}
	}
	for _, v := range p.AttributesToRetrieve {
		if err := oprot.WriteByte(ctx, int8(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err)
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsAttributes2Result struct {
	Success *Settings      `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
	return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings

func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
	if !p.IsSetSuccess() {
		return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetSettingsAttributes2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetSettingsAttributes2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetSettingsAttributes2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &Settings{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getSettingsAttributes2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetContactsV2Args struct {
	Request    *GetContactsV2Request `thrift:"request,1" db:"request" json:"request"`
	SyncReason SyncReason            `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetContactsV2Args() *TalkServiceGetContactsV2Args {
	return &TalkServiceGetContactsV2Args{}
}

var TalkServiceGetContactsV2Args_Request_DEFAULT *GetContactsV2Request

func (p *TalkServiceGetContactsV2Args) GetRequest() *GetContactsV2Request {
	if !p.IsSetRequest() {
		return TalkServiceGetContactsV2Args_Request_DEFAULT
	}
	return p.Request
}

func (p *TalkServiceGetContactsV2Args) GetSyncReason() SyncReason {
	return p.SyncReason
}
func (p *TalkServiceGetContactsV2Args) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetContactsV2Args) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Args) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetContactsV2Request{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Args) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SyncReason(v)
		p.SyncReason = temp
	}
	return nil
}

func (p *TalkServiceGetContactsV2Args) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getContactsV2_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Args) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactsV2Args) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "syncReason", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.SyncReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err)
	}
	return err
}

func (p *TalkServiceGetContactsV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsV2Result struct {
	Success *GetContactsV2Response `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException         `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsV2Result() *TalkServiceGetContactsV2Result {
	return &TalkServiceGetContactsV2Result{}
}

var TalkServiceGetContactsV2Result_Success_DEFAULT *GetContactsV2Response

func (p *TalkServiceGetContactsV2Result) GetSuccess() *GetContactsV2Response {
	if !p.IsSetSuccess() {
		return TalkServiceGetContactsV2Result_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetContactsV2Result_E_DEFAULT *TalkException

func (p *TalkServiceGetContactsV2Result) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetContactsV2Result_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetContactsV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetContactsV2Result) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetContactsV2Result) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Result) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetContactsV2Response{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Result) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Result) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getContactsV2_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetContactsV2Result) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsV2Result) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetContactsV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetContactsV2Result(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceFindChatByTicketArgs struct {
	Request *FindChatByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceFindChatByTicketArgs() *TalkServiceFindChatByTicketArgs {
	return &TalkServiceFindChatByTicketArgs{}
}

var TalkServiceFindChatByTicketArgs_Request_DEFAULT *FindChatByTicketRequest

func (p *TalkServiceFindChatByTicketArgs) GetRequest() *FindChatByTicketRequest {
	if !p.IsSetRequest() {
		return TalkServiceFindChatByTicketArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceFindChatByTicketArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceFindChatByTicketArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &FindChatByTicketRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "findChatByTicket_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceFindChatByTicketArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindChatByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindChatByTicketResult struct {
	Success *FindChatByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException            `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindChatByTicketResult() *TalkServiceFindChatByTicketResult {
	return &TalkServiceFindChatByTicketResult{}
}

var TalkServiceFindChatByTicketResult_Success_DEFAULT *FindChatByTicketResponse

func (p *TalkServiceFindChatByTicketResult) GetSuccess() *FindChatByTicketResponse {
	if !p.IsSetSuccess() {
		return TalkServiceFindChatByTicketResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceFindChatByTicketResult_E_DEFAULT *TalkException

func (p *TalkServiceFindChatByTicketResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceFindChatByTicketResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceFindChatByTicketResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceFindChatByTicketResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceFindChatByTicketResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &FindChatByTicketResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "findChatByTicket_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceFindChatByTicketResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindChatByTicketResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceFindChatByTicketResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceFindChatByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReportAbuseExArgs struct {
	// unused field # 1
	Request *ReportAbuseExRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceReportAbuseExArgs() *TalkServiceReportAbuseExArgs {
	return &TalkServiceReportAbuseExArgs{}
}

var TalkServiceReportAbuseExArgs_Request_DEFAULT *ReportAbuseExRequest

func (p *TalkServiceReportAbuseExArgs) GetRequest() *ReportAbuseExRequest {
	if !p.IsSetRequest() {
		return TalkServiceReportAbuseExArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceReportAbuseExArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceReportAbuseExArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &ReportAbuseExRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reportAbuseEx_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err)
	}
	return err
}

func (p *TalkServiceReportAbuseExArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportAbuseExArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportAbuseExResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportAbuseExResult() *TalkServiceReportAbuseExResult {
	return &TalkServiceReportAbuseExResult{}
}

var TalkServiceReportAbuseExResult_E_DEFAULT *TalkException

func (p *TalkServiceReportAbuseExResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceReportAbuseExResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceReportAbuseExResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceReportAbuseExResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reportAbuseEx_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceReportAbuseExResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceReportAbuseExResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceReportAbuseExResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetPreviousMessageIdsArgs struct {
	// unused field # 1
	Request *GetPreviousMessageIdsRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceGetPreviousMessageIdsArgs() *TalkServiceGetPreviousMessageIdsArgs {
	return &TalkServiceGetPreviousMessageIdsArgs{}
}

var TalkServiceGetPreviousMessageIdsArgs_Request_DEFAULT *GetPreviousMessageIdsRequest

func (p *TalkServiceGetPreviousMessageIdsArgs) GetRequest() *GetPreviousMessageIdsRequest {
	if !p.IsSetRequest() {
		return TalkServiceGetPreviousMessageIdsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceGetPreviousMessageIdsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceGetPreviousMessageIdsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetPreviousMessageIdsRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPreviousMessageIds_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err)
	}
	return err
}

func (p *TalkServiceGetPreviousMessageIdsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPreviousMessageIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetPreviousMessageIdsResult struct {
	Success *GetPreviousMessageIdsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException                 `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetPreviousMessageIdsResult() *TalkServiceGetPreviousMessageIdsResult {
	return &TalkServiceGetPreviousMessageIdsResult{}
}

var TalkServiceGetPreviousMessageIdsResult_Success_DEFAULT *GetPreviousMessageIdsResponse

func (p *TalkServiceGetPreviousMessageIdsResult) GetSuccess() *GetPreviousMessageIdsResponse {
	if !p.IsSetSuccess() {
		return TalkServiceGetPreviousMessageIdsResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceGetPreviousMessageIdsResult_E_DEFAULT *TalkException

func (p *TalkServiceGetPreviousMessageIdsResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceGetPreviousMessageIdsResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceGetPreviousMessageIdsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetPreviousMessageIdsResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getPreviousMessageIds_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceGetPreviousMessageIdsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPreviousMessageIdsResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceGetPreviousMessageIdsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceGetPreviousMessageIdsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceSyncArgs struct {
	Request *SyncRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceSyncArgs() *TalkServiceSyncArgs {
	return &TalkServiceSyncArgs{}
}

var TalkServiceSyncArgs_Request_DEFAULT *SyncRequest

func (p *TalkServiceSyncArgs) GetRequest() *SyncRequest {
	if !p.IsSetRequest() {
		return TalkServiceSyncArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *TalkServiceSyncArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *TalkServiceSyncArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSyncArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &SyncRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *TalkServiceSyncArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sync_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSyncArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *TalkServiceSyncArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSyncArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSyncResult struct {
	Success *SyncResponse  `thrift:"success,0" db:"success" json:"success,omitempty"`
	E       *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSyncResult() *TalkServiceSyncResult {
	return &TalkServiceSyncResult{}
}

var TalkServiceSyncResult_Success_DEFAULT *SyncResponse

func (p *TalkServiceSyncResult) GetSuccess() *SyncResponse {
	if !p.IsSetSuccess() {
		return TalkServiceSyncResult_Success_DEFAULT
	}
	return p.Success
}

var TalkServiceSyncResult_E_DEFAULT *TalkException

func (p *TalkServiceSyncResult) GetE() *TalkException {
	if !p.IsSetE() {
		return TalkServiceSyncResult_E_DEFAULT
	}
	return p.E
}
func (p *TalkServiceSyncResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TalkServiceSyncResult) IsSetE() bool {
	return p.E != nil
}

func (p *TalkServiceSyncResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TalkServiceSyncResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &SyncResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TalkServiceSyncResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *TalkServiceSyncResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "sync_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TalkServiceSyncResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSyncResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *TalkServiceSyncResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalkServiceSyncResult(%+v)", *p)
}

// Attributes:
//  - LastRevision
//  - Count
//  - LastGlobalRevision
//  - LastIndividualRevision
//  - FullSyncRequestReason
//  - LastPartialFullSyncs
type SyncRequest struct {
	LastRevision           int64              `thrift:"lastRevision,1" db:"lastRevision" json:"lastRevision"`
	Count                  int32              `thrift:"count,2" db:"count" json:"count"`
	LastGlobalRevision     int64              `thrift:"lastGlobalRevision,3" db:"lastGlobalRevision" json:"lastGlobalRevision"`
	LastIndividualRevision int64              `thrift:"lastIndividualRevision,4" db:"lastIndividualRevision" json:"lastIndividualRevision"`
	FullSyncRequestReason  int32              `thrift:"fullSyncRequestReason,5" db:"fullSyncRequestReason" json:"fullSyncRequestReason"`
	LastPartialFullSyncs   map[SyncType]int64 `thrift:"lastPartialFullSyncs,6" db:"lastPartialFullSyncs" json:"lastPartialFullSyncs"`
}

func NewSyncRequest() *SyncRequest {
	return &SyncRequest{}
}

func (p *SyncRequest) GetLastRevision() int64 {
	return p.LastRevision
}

func (p *SyncRequest) GetCount() int32 {
	return p.Count
}

func (p *SyncRequest) GetLastGlobalRevision() int64 {
	return p.LastGlobalRevision
}

func (p *SyncRequest) GetLastIndividualRevision() int64 {
	return p.LastIndividualRevision
}

func (p *SyncRequest) GetFullSyncRequestReason() int32 {
	return p.FullSyncRequestReason
}

func (p *SyncRequest) GetLastPartialFullSyncs() map[SyncType]int64 {
	return p.LastPartialFullSyncs
}
func (p *SyncRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SyncRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.LastRevision = v
	}
	return nil
}

func (p *SyncRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *SyncRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LastGlobalRevision = v
	}
	return nil
}

func (p *SyncRequest) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LastIndividualRevision = v
	}
	return nil
}

func (p *SyncRequest) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FullSyncRequestReason = v
	}
	return nil
}

func (p *SyncRequest) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[SyncType]int64, size)
	p.LastPartialFullSyncs = tMap
	for i := 0; i < size; i++ {
		var _key31 SyncType
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SyncType(v)
			_key31 = temp
		}
		var _val32 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val32 = v
		}
		p.LastPartialFullSyncs[_key31] = _val32
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *SyncRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SyncRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField6(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lastRevision: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.LastRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastRevision (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lastRevision: ", p), err)
	}
	return err
}

func (p *SyncRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "count", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:count: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:count: ", p), err)
	}
	return err
}

func (p *SyncRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastGlobalRevision", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastGlobalRevision: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.LastGlobalRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastGlobalRevision (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastGlobalRevision: ", p), err)
	}
	return err
}

func (p *SyncRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastIndividualRevision", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastIndividualRevision: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.LastIndividualRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastIndividualRevision (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastIndividualRevision: ", p), err)
	}
	return err
}

func (p *SyncRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.FullSyncRequestReason != 0 {
		if err := oprot.WriteFieldBegin(ctx, "fullSyncRequestReason", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fullSyncRequestReason: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(p.FullSyncRequestReason)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fullSyncRequestReason (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fullSyncRequestReason: ", p), err)
		}
	}
	return err
}

func (p *SyncRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.LastPartialFullSyncs != nil {
		if err := oprot.WriteFieldBegin(ctx, "lastPartialFullSyncs", thrift.MAP, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastPartialFullSyncs: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.LastPartialFullSyncs)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.LastPartialFullSyncs {
			if err := oprot.WriteI32(ctx, int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastPartialFullSyncs: ", p), err)
		}
	}
	return err
}

func (p *SyncRequest) Equals(other *SyncRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.LastRevision != other.LastRevision {
		return false
	}
	if p.Count != other.Count {
		return false
	}
	if p.LastGlobalRevision != other.LastGlobalRevision {
		return false
	}
	if p.LastIndividualRevision != other.LastIndividualRevision {
		return false
	}
	if p.FullSyncRequestReason != other.FullSyncRequestReason {
		return false
	}
	if len(p.LastPartialFullSyncs) != len(other.LastPartialFullSyncs) {
		return false
	}
	for k, _tgt := range p.LastPartialFullSyncs {
		_src33 := other.LastPartialFullSyncs[k]
		if _tgt != _src33 {
			return false
		}
	}
	return true
}

func (p *SyncRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncRequest(%+v)", *p)
}

// Attributes:
//  - OperationResponse
//  - FullSyncResponse
//  - PartialFullSyncResponse
type SyncResponse struct {
	OperationResponse       *OperationResponse       `thrift:"operationResponse,1" db:"operationResponse" json:"operationResponse"`
	FullSyncResponse        *FullSyncResponse        `thrift:"fullSyncResponse,2" db:"fullSyncResponse" json:"fullSyncResponse"`
	PartialFullSyncResponse *PartialFullSyncResponse `thrift:"partialFullSyncResponse,3" db:"partialFullSyncResponse" json:"partialFullSyncResponse"`
}

func NewSyncResponse() *SyncResponse {
	return &SyncResponse{}
}

var SyncResponse_OperationResponse_DEFAULT *OperationResponse

func (p *SyncResponse) GetOperationResponse() *OperationResponse {
	if !p.IsSetOperationResponse() {
		return SyncResponse_OperationResponse_DEFAULT
	}
	return p.OperationResponse
}

var SyncResponse_FullSyncResponse_DEFAULT *FullSyncResponse

func (p *SyncResponse) GetFullSyncResponse() *FullSyncResponse {
	if !p.IsSetFullSyncResponse() {
		return SyncResponse_FullSyncResponse_DEFAULT
	}
	return p.FullSyncResponse
}

var SyncResponse_PartialFullSyncResponse_DEFAULT *PartialFullSyncResponse

func (p *SyncResponse) GetPartialFullSyncResponse() *PartialFullSyncResponse {
	if !p.IsSetPartialFullSyncResponse() {
		return SyncResponse_PartialFullSyncResponse_DEFAULT
	}
	return p.PartialFullSyncResponse
}
func (p *SyncResponse) IsSetOperationResponse() bool {
	return p.OperationResponse != nil
}

func (p *SyncResponse) IsSetFullSyncResponse() bool {
	return p.FullSyncResponse != nil
}

func (p *SyncResponse) IsSetPartialFullSyncResponse() bool {
	return p.PartialFullSyncResponse != nil
}

func (p *SyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SyncResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.OperationResponse = &OperationResponse{}
	if err := p.OperationResponse.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OperationResponse), err)
	}
	return nil
}

func (p *SyncResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.FullSyncResponse = &FullSyncResponse{}
	if err := p.FullSyncResponse.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FullSyncResponse), err)
	}
	return nil
}

func (p *SyncResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.PartialFullSyncResponse = &PartialFullSyncResponse{}
	if err := p.PartialFullSyncResponse.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PartialFullSyncResponse), err)
	}
	return nil
}

func (p *SyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "SyncResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operationResponse", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operationResponse: ", p), err)
	}
	if err := p.OperationResponse.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OperationResponse), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operationResponse: ", p), err)
	}
	return err
}

func (p *SyncResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fullSyncResponse", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullSyncResponse: ", p), err)
	}
	if err := p.FullSyncResponse.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FullSyncResponse), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullSyncResponse: ", p), err)
	}
	return err
}

func (p *SyncResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "partialFullSyncResponse", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partialFullSyncResponse: ", p), err)
	}
	if err := p.PartialFullSyncResponse.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PartialFullSyncResponse), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partialFullSyncResponse: ", p), err)
	}
	return err
}

func (p *SyncResponse) Equals(other *SyncResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.OperationResponse.Equals(other.OperationResponse) {
		return false
	}
	if !p.FullSyncResponse.Equals(other.FullSyncResponse) {
		return false
	}
	if !p.PartialFullSyncResponse.Equals(other.PartialFullSyncResponse) {
		return false
	}
	return true
}

func (p *SyncResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncResponse(%+v)", *p)
}

// Attributes:
//  - TargetCategories
type PartialFullSyncResponse struct {
	TargetCategories map[SyncType]int64 `thrift:"targetCategories,1" db:"targetCategories" json:"targetCategories"`
}

func NewPartialFullSyncResponse() *PartialFullSyncResponse {
	return &PartialFullSyncResponse{}
}

func (p *PartialFullSyncResponse) GetTargetCategories() map[SyncType]int64 {
	return p.TargetCategories
}
func (p *PartialFullSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *PartialFullSyncResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[SyncType]int64, size)
	p.TargetCategories = tMap
	for i := 0; i < size; i++ {
		var _key34 SyncType
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SyncType(v)
			_key34 = temp
		}
		var _val35 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val35 = v
		}
		p.TargetCategories[_key34] = _val35
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *PartialFullSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "PartialFullSyncResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PartialFullSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "targetCategories", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:targetCategories: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I64, len(p.TargetCategories)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.TargetCategories {
		if err := oprot.WriteI32(ctx, int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:targetCategories: ", p), err)
	}
	return err
}

func (p *PartialFullSyncResponse) Equals(other *PartialFullSyncResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.TargetCategories) != len(other.TargetCategories) {
		return false
	}
	for k, _tgt := range p.TargetCategories {
		_src36 := other.TargetCategories[k]
		if _tgt != _src36 {
			return false
		}
	}
	return true
}

func (p *PartialFullSyncResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PartialFullSyncResponse(%+v)", *p)
}

// Attributes:
//  - Reasons
//  - NextRevision
type FullSyncResponse struct {
	Reasons      []SyncReasonType `thrift:"reasons,1" db:"reasons" json:"reasons"`
	NextRevision int64            `thrift:"nextRevision,2" db:"nextRevision" json:"nextRevision"`
}

func NewFullSyncResponse() *FullSyncResponse {
	return &FullSyncResponse{}
}

func (p *FullSyncResponse) GetReasons() []SyncReasonType {
	return p.Reasons
}

func (p *FullSyncResponse) GetNextRevision() int64 {
	return p.NextRevision
}
func (p *FullSyncResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FullSyncResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]SyncReasonType, 0, size)
	p.Reasons = tSet
	for i := 0; i < size; i++ {
		var _elem37 SyncReasonType
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := SyncReasonType(v)
			_elem37 = temp
		}
		p.Reasons = append(p.Reasons, _elem37)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *FullSyncResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NextRevision = v
	}
	return nil
}

func (p *FullSyncResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "FullSyncResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FullSyncResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reasons", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reasons: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Reasons)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Reasons); i++ {
		for j := i + 1; j < len(p.Reasons); j++ {
			if func(tgt, src SyncReasonType) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.Reasons[i], p.Reasons[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Reasons))
			}
		}
	}
	for _, v := range p.Reasons {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reasons: ", p), err)
	}
	return err
}

func (p *FullSyncResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "nextRevision", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nextRevision: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.NextRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nextRevision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nextRevision: ", p), err)
	}
	return err
}

func (p *FullSyncResponse) Equals(other *FullSyncResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Reasons) != len(other.Reasons) {
		return false
	}
	for i, _tgt := range p.Reasons {
		_src38 := other.Reasons[i]
		if _tgt != _src38 {
			return false
		}
	}
	if p.NextRevision != other.NextRevision {
		return false
	}
	return true
}

func (p *FullSyncResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FullSyncResponse(%+v)", *p)
}

// Attributes:
//  - Operations
//  - HasMoreOps
//  - GlobalEvents
//  - IndividualEvents
type OperationResponse struct {
	Operations       []*Operation       `thrift:"operations,1" db:"operations" json:"operations"`
	HasMoreOps       bool               `thrift:"hasMoreOps,2" db:"hasMoreOps" json:"hasMoreOps"`
	GlobalEvents     *TGlobalEvents     `thrift:"globalEvents,3" db:"globalEvents" json:"globalEvents"`
	IndividualEvents *TIndividualEvents `thrift:"individualEvents,4" db:"individualEvents" json:"individualEvents"`
}

func NewOperationResponse() *OperationResponse {
	return &OperationResponse{}
}

func (p *OperationResponse) GetOperations() []*Operation {
	return p.Operations
}

func (p *OperationResponse) GetHasMoreOps() bool {
	return p.HasMoreOps
}

var OperationResponse_GlobalEvents_DEFAULT *TGlobalEvents

func (p *OperationResponse) GetGlobalEvents() *TGlobalEvents {
	if !p.IsSetGlobalEvents() {
		return OperationResponse_GlobalEvents_DEFAULT
	}
	return p.GlobalEvents
}

var OperationResponse_IndividualEvents_DEFAULT *TIndividualEvents

func (p *OperationResponse) GetIndividualEvents() *TIndividualEvents {
	if !p.IsSetIndividualEvents() {
		return OperationResponse_IndividualEvents_DEFAULT
	}
	return p.IndividualEvents
}
func (p *OperationResponse) IsSetGlobalEvents() bool {
	return p.GlobalEvents != nil
}

func (p *OperationResponse) IsSetIndividualEvents() bool {
	return p.IndividualEvents != nil
}

func (p *OperationResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *OperationResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Operation, 0, size)
	p.Operations = tSlice
	for i := 0; i < size; i++ {
		_elem39 := &Operation{}
		if err := _elem39.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
		}
		p.Operations = append(p.Operations, _elem39)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *OperationResponse) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasMoreOps = v
	}
	return nil
}

func (p *OperationResponse) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.GlobalEvents = &TGlobalEvents{}
	if err := p.GlobalEvents.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GlobalEvents), err)
	}
	return nil
}

func (p *OperationResponse) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.IndividualEvents = &TIndividualEvents{}
	if err := p.IndividualEvents.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndividualEvents), err)
	}
	return nil
}

func (p *OperationResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "OperationResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *OperationResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "operations", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operations: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Operations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Operations {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operations: ", p), err)
	}
	return err
}

func (p *OperationResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hasMoreOps", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasMoreOps: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.HasMoreOps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasMoreOps (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasMoreOps: ", p), err)
	}
	return err
}

func (p *OperationResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "globalEvents", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:globalEvents: ", p), err)
	}
	if err := p.GlobalEvents.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GlobalEvents), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:globalEvents: ", p), err)
	}
	return err
}

func (p *OperationResponse) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "individualEvents", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:individualEvents: ", p), err)
	}
	if err := p.IndividualEvents.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndividualEvents), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:individualEvents: ", p), err)
	}
	return err
}

func (p *OperationResponse) Equals(other *OperationResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Operations) != len(other.Operations) {
		return false
	}
	for i, _tgt := range p.Operations {
		_src40 := other.Operations[i]
		if !_tgt.Equals(_src40) {
			return false
		}
	}
	if p.HasMoreOps != other.HasMoreOps {
		return false
	}
	if !p.GlobalEvents.Equals(other.GlobalEvents) {
		return false
	}
	if !p.IndividualEvents.Equals(other.IndividualEvents) {
		return false
	}
	return true
}

func (p *OperationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OperationResponse(%+v)", *p)
}

// Attributes:
//  - Events
//  - LastRevision
type TGlobalEvents struct {
	Events       map[GlobalEvents]*GlobalEvent `thrift:"events,1" db:"events" json:"events"`
	LastRevision int64                         `thrift:"lastRevision,2" db:"lastRevision" json:"lastRevision"`
}

func NewTGlobalEvents() *TGlobalEvents {
	return &TGlobalEvents{}
}

func (p *TGlobalEvents) GetEvents() map[GlobalEvents]*GlobalEvent {
	return p.Events
}

func (p *TGlobalEvents) GetLastRevision() int64 {
	return p.LastRevision
}
func (p *TGlobalEvents) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TGlobalEvents) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[GlobalEvents]*GlobalEvent, size)
	p.Events = tMap
	for i := 0; i < size; i++ {
		var _key41 GlobalEvents
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := GlobalEvents(v)
			_key41 = temp
		}
		_val42 := &GlobalEvent{}
		if err := _val42.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val42), err)
		}
		p.Events[_key41] = _val42
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TGlobalEvents) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastRevision = v
	}
	return nil
}

func (p *TGlobalEvents) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TGlobalEvents"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGlobalEvents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "events", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err)
	}
	if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRUCT, len(p.Events)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Events {
		if err := oprot.WriteI32(ctx, int32(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(ctx); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err)
	}
	return err
}

func (p *TGlobalEvents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRevision: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LastRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastRevision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRevision: ", p), err)
	}
	return err
}

func (p *TGlobalEvents) Equals(other *TGlobalEvents) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Events) != len(other.Events) {
		return false
	}
	for k, _tgt := range p.Events {
		_src43 := other.Events[k]
		if !_tgt.Equals(_src43) {
			return false
		}
	}
	if p.LastRevision != other.LastRevision {
		return false
	}
	return true
}

func (p *TGlobalEvents) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGlobalEvents(%+v)", *p)
}

// Attributes:
//  - Type
//  - MinDelayInMinutes
//  - MaxDelayInMinutes
//  - CreateTimeMillis
//  - MaxDelayHardLimit
type GlobalEvent struct {
	Type              int32 `thrift:"type,1" db:"type" json:"type"`
	MinDelayInMinutes int32 `thrift:"minDelayInMinutes,2" db:"minDelayInMinutes" json:"minDelayInMinutes"`
	MaxDelayInMinutes int32 `thrift:"maxDelayInMinutes,3" db:"maxDelayInMinutes" json:"maxDelayInMinutes"`
	CreateTimeMillis  int64 `thrift:"createTimeMillis,4" db:"createTimeMillis" json:"createTimeMillis"`
	MaxDelayHardLimit bool  `thrift:"maxDelayHardLimit,5" db:"maxDelayHardLimit" json:"maxDelayHardLimit"`
}

func NewGlobalEvent() *GlobalEvent {
	return &GlobalEvent{}
}

func (p *GlobalEvent) GetType() int32 {
	return p.Type
}

func (p *GlobalEvent) GetMinDelayInMinutes() int32 {
	return p.MinDelayInMinutes
}

func (p *GlobalEvent) GetMaxDelayInMinutes() int32 {
	return p.MaxDelayInMinutes
}

func (p *GlobalEvent) GetCreateTimeMillis() int64 {
	return p.CreateTimeMillis
}

func (p *GlobalEvent) GetMaxDelayHardLimit() bool {
	return p.MaxDelayHardLimit
}
func (p *GlobalEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GlobalEvent) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *GlobalEvent) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MinDelayInMinutes = v
	}
	return nil
}

func (p *GlobalEvent) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxDelayInMinutes = v
	}
	return nil
}

func (p *GlobalEvent) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CreateTimeMillis = v
	}
	return nil
}

func (p *GlobalEvent) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MaxDelayHardLimit = v
	}
	return nil
}

func (p *GlobalEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GlobalEvent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField4(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField5(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GlobalEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "minDelayInMinutes", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:minDelayInMinutes: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MinDelayInMinutes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.minDelayInMinutes (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:minDelayInMinutes: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "maxDelayInMinutes", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxDelayInMinutes: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.MaxDelayInMinutes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxDelayInMinutes (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxDelayInMinutes: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "createTimeMillis", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTimeMillis: ", p), err)
	}
	if err := oprot.WriteI64(ctx, int64(p.CreateTimeMillis)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.createTimeMillis (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTimeMillis: ", p), err)
	}
	return err
}

func (p *GlobalEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "maxDelayHardLimit", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:maxDelayHardLimit: ", p), err)
	}
	if err := oprot.WriteBool(ctx, bool(p.MaxDelayHardLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxDelayHardLimit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:maxDelayHardLimit: ", p), err)
	}
	return err
}

func (p *GlobalEvent) Equals(other *GlobalEvent) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if p.MinDelayInMinutes != other.MinDelayInMinutes {
		return false
	}
	if p.MaxDelayInMinutes != other.MaxDelayInMinutes {
		return false
	}
	if p.CreateTimeMillis != other.CreateTimeMillis {
		return false
	}
	if p.MaxDelayHardLimit != other.MaxDelayHardLimit {
		return false
	}
	return true
}

func (p *GlobalEvent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GlobalEvent(%+v)", *p)
}

// Attributes:
//  - Events
//  - LastRevision
type TIndividualEvents struct {
	Events       []IndividualEventType `thrift:"events,1" db:"events" json:"events"`
	LastRevision int64                 `thrift:"lastRevision,2" db:"lastRevision" json:"lastRevision"`
}

func NewTIndividualEvents() *TIndividualEvents {
	return &TIndividualEvents{}
}

func (p *TIndividualEvents) GetEvents() []IndividualEventType {
	return p.Events
}

func (p *TIndividualEvents) GetLastRevision() int64 {
	return p.LastRevision
}
func (p *TIndividualEvents) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TIndividualEvents) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]IndividualEventType, 0, size)
	p.Events = tSet
	for i := 0; i < size; i++ {
		var _elem44 IndividualEventType
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := IndividualEventType(v)
			_elem44 = temp
		}
		p.Events = append(p.Events, _elem44)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TIndividualEvents) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LastRevision = v
	}
	return nil
}

func (p *TIndividualEvents) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "TIndividualEvents"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TIndividualEvents) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "events", thrift.SET, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:events: ", p), err)
	}
	if err := oprot.WriteSetBegin(ctx, thrift.I32, len(p.Events)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i < len(p.Events); i++ {
		for j := i + 1; j < len(p.Events); j++ {
			if func(tgt, src IndividualEventType) bool {
				if tgt != src {
					return false
				}
				return true
			}(p.Events[i], p.Events[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Events))
			}
		}
	}
	for _, v := range p.Events {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:events: ", p), err)
	}
	return err
}

func (p *TIndividualEvents) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lastRevision", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRevision: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.LastRevision)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.lastRevision (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRevision: ", p), err)
	}
	return err
}

func (p *TIndividualEvents) Equals(other *TIndividualEvents) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Events) != len(other.Events) {
		return false
	}
	for i, _tgt := range p.Events {
		_src45 := other.Events[i]
		if _tgt != _src45 {
			return false
		}
	}
	if p.LastRevision != other.LastRevision {
		return false
	}
	return true
}

func (p *TIndividualEvents) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIndividualEvents(%+v)", *p)
}

func (p *Operation) Equals(other *Operation) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Revision != other.Revision {
		return false
	}
	if p.CreatedTime != other.CreatedTime {
		return false
	}
	if p.Type != other.Type {
		return false
	}
	if p.ReqSeq != other.ReqSeq {
		return false
	}
	if p.Checksum != other.Checksum {
		return false
	}
	if p.Status != other.Status {
		return false
	}
	if p.Param1 != other.Param1 {
		return false
	}
	if p.Param2 != other.Param2 {
		return false
	}
	if p.Param3 != other.Param3 {
		return false
	}
	if !p.Message.Equals(other.Message) {
		return false
	}
	return true
}
func (p *Message) Equals(other *Message) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

type RejectedExceptionCode int64

const (
	RejectedExceptionCode_UNKNOWN             RejectedExceptionCode = 0
	RejectedExceptionCode_INVALID_TARGET_USER RejectedExceptionCode = 1
	RejectedExceptionCode_AGE_VALIDATION      RejectedExceptionCode = 2
	RejectedExceptionCode_TOO_MANY_FRIENDS    RejectedExceptionCode = 3
	RejectedExceptionCode_TOO_MANY_REQUESTS   RejectedExceptionCode = 4
	RejectedExceptionCode_MALFORMED_REQUEST   RejectedExceptionCode = 5
)

func (p RejectedExceptionCode) String() string {
	switch p {
	case RejectedExceptionCode_UNKNOWN:
		return "UNKNOWN"
	case RejectedExceptionCode_INVALID_TARGET_USER:
		return "INVALID_TARGET_USER"
	case RejectedExceptionCode_AGE_VALIDATION:
		return "AGE_VALIDATION"
	case RejectedExceptionCode_TOO_MANY_FRIENDS:
		return "TOO_MANY_FRIENDS"
	case RejectedExceptionCode_TOO_MANY_REQUESTS:
		return "TOO_MANY_REQUESTS"
	case RejectedExceptionCode_MALFORMED_REQUEST:
		return "MALFORMED_REQUEST"
	}
	return "<UNSET>"
}

func RejectedExceptionCodeFromString(s string) (RejectedExceptionCode, error) {
	switch s {
	case "UNKNOWN":
		return RejectedExceptionCode_UNKNOWN, nil
	case "INVALID_TARGET_USER":
		return RejectedExceptionCode_INVALID_TARGET_USER, nil
	case "AGE_VALIDATION":
		return RejectedExceptionCode_AGE_VALIDATION, nil
	case "TOO_MANY_FRIENDS":
		return RejectedExceptionCode_TOO_MANY_FRIENDS, nil
	case "TOO_MANY_REQUESTS":
		return RejectedExceptionCode_TOO_MANY_REQUESTS, nil
	case "MALFORMED_REQUEST":
		return RejectedExceptionCode_MALFORMED_REQUEST, nil
	}
	return RejectedExceptionCode(0), fmt.Errorf("not a valid RejectedExceptionCode string")
}

func RejectedExceptionCodePtr(v RejectedExceptionCode) *RejectedExceptionCode { return &v }

func (p RejectedExceptionCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RejectedExceptionCode) UnmarshalText(text []byte) error {
	q, err := RejectedExceptionCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *RejectedExceptionCode) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = RejectedExceptionCode(v)
	return nil
}

func (p *RejectedExceptionCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// Attributes:
//  - RejectionReason
//  - Hint
type RejectedException struct {
	RejectionReason RejectedExceptionCode `thrift:"rejectionReason,1" db:"rejectionReason" json:"rejectionReason"`
	Hint            string                `thrift:"hint,2" db:"hint" json:"hint"`
}

func NewRejectedException() *RejectedException {
	return &RejectedException{}
}

func (p *RejectedException) GetRejectionReason() RejectedExceptionCode {
	return p.RejectionReason
}

func (p *RejectedException) GetHint() string {
	return p.Hint
}
func (p *RejectedException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RejectedException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := RejectedExceptionCode(v)
		p.RejectionReason = temp
	}
	return nil
}

func (p *RejectedException) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Hint = v
	}
	return nil
}

func (p *RejectedException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RejectedException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RejectedException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "rejectionReason", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rejectionReason: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.RejectionReason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rejectionReason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rejectionReason: ", p), err)
	}
	return err
}

func (p *RejectedException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hint", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hint: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hint (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hint: ", p), err)
	}
	return err
}

func (p *RejectedException) Equals(other *RejectedException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.RejectionReason != other.RejectionReason {
		return false
	}
	if p.Hint != other.Hint {
		return false
	}
	return true
}

func (p *RejectedException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RejectedException(%+v)", *p)
}

func (p *RejectedException) Error() string {
	return p.String()
}

func (RejectedException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*RejectedException)(nil)

// Attributes:
//  - Hint
type ServerFailureException struct {
	Hint string `thrift:"hint,1" db:"hint" json:"hint"`
}

func NewServerFailureException() *ServerFailureException {
	return &ServerFailureException{}
}

func (p *ServerFailureException) GetHint() string {
	return p.Hint
}
func (p *ServerFailureException) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServerFailureException) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hint = v
	}
	return nil
}

func (p *ServerFailureException) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "ServerFailureException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServerFailureException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hint", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hint: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hint (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hint: ", p), err)
	}
	return err
}

func (p *ServerFailureException) Equals(other *ServerFailureException) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Hint != other.Hint {
		return false
	}
	return true
}

func (p *ServerFailureException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServerFailureException(%+v)", *p)
}

func (p *ServerFailureException) Error() string {
	return p.String()
}

func (ServerFailureException) TExceptionType() thrift.TExceptionType {
	return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ServerFailureException)(nil)

// Attributes:
//  - Hint
type AddMetaInvalid struct {
	Hint string `thrift:"hint,1" db:"hint" json:"hint"`
}

func NewAddMetaInvalid() *AddMetaInvalid {
	return &AddMetaInvalid{}
}

func (p *AddMetaInvalid) GetHint() string {
	return p.Hint
}
func (p *AddMetaInvalid) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaInvalid) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hint = v
	}
	return nil
}

func (p *AddMetaInvalid) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaInvalid"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaInvalid) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hint", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hint: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hint (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hint: ", p), err)
	}
	return err
}

func (p *AddMetaInvalid) Equals(other *AddMetaInvalid) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Hint != other.Hint {
		return false
	}
	return true
}

func (p *AddMetaInvalid) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaInvalid(%+v)", *p)
}

// Attributes:
//  - Phone
type AddMetaByPhone struct {
	Phone string `thrift:"phone,1" db:"phone" json:"phone"`
}

func NewAddMetaByPhone() *AddMetaByPhone {
	return &AddMetaByPhone{}
}

func (p *AddMetaByPhone) GetPhone() string {
	return p.Phone
}
func (p *AddMetaByPhone) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaByPhone) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *AddMetaByPhone) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaByPhone"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaByPhone) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "phone", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err)
	}
	return err
}

func (p *AddMetaByPhone) Equals(other *AddMetaByPhone) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Phone != other.Phone {
		return false
	}
	return true
}

func (p *AddMetaByPhone) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaByPhone(%+v)", *p)
}

// Attributes:
//  - SearchId
type AddMetaBySearchId struct {
	SearchId string `thrift:"searchId,1" db:"searchId" json:"searchId"`
}

func NewAddMetaBySearchId() *AddMetaBySearchId {
	return &AddMetaBySearchId{}
}

func (p *AddMetaBySearchId) GetSearchId() string {
	return p.SearchId
}
func (p *AddMetaBySearchId) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaBySearchId) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SearchId = v
	}
	return nil
}

func (p *AddMetaBySearchId) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaBySearchId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaBySearchId) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "searchId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:searchId: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.SearchId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.searchId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:searchId: ", p), err)
	}
	return err
}

func (p *AddMetaBySearchId) Equals(other *AddMetaBySearchId) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.SearchId != other.SearchId {
		return false
	}
	return true
}

func (p *AddMetaBySearchId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaBySearchId(%+v)", *p)
}

// Attributes:
//  - Ticket
type AddMetaByUserTicket struct {
	Ticket string `thrift:"ticket,1" db:"ticket" json:"ticket"`
}

func NewAddMetaByUserTicket() *AddMetaByUserTicket {
	return &AddMetaByUserTicket{}
}

func (p *AddMetaByUserTicket) GetTicket() string {
	return p.Ticket
}
func (p *AddMetaByUserTicket) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaByUserTicket) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Ticket = v
	}
	return nil
}

func (p *AddMetaByUserTicket) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaByUserTicket"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaByUserTicket) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "ticket", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticket: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Ticket)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ticket (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticket: ", p), err)
	}
	return err
}

func (p *AddMetaByUserTicket) Equals(other *AddMetaByUserTicket) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Ticket != other.Ticket {
		return false
	}
	return true
}

func (p *AddMetaByUserTicket) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaByUserTicket(%+v)", *p)
}

// Attributes:
//  - ChatMid
type AddMetaGroupMemberList struct {
	ChatMid string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
}

func NewAddMetaGroupMemberList() *AddMetaGroupMemberList {
	return &AddMetaGroupMemberList{}
}

func (p *AddMetaGroupMemberList) GetChatMid() string {
	return p.ChatMid
}
func (p *AddMetaGroupMemberList) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaGroupMemberList) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AddMetaGroupMemberList) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaGroupMemberList"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaGroupMemberList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err)
	}
	return err
}

func (p *AddMetaGroupMemberList) Equals(other *AddMetaGroupMemberList) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ChatMid != other.ChatMid {
		return false
	}
	return true
}

func (p *AddMetaGroupMemberList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaGroupMemberList(%+v)", *p)
}

type AddMetaTimelineCPF struct {
}

func NewAddMetaTimelineCPF() *AddMetaTimelineCPF {
	return &AddMetaTimelineCPF{}
}

func (p *AddMetaTimelineCPF) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaTimelineCPF) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaTimelineCPF"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaTimelineCPF) Equals(other *AddMetaTimelineCPF) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaTimelineCPF) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaTimelineCPF(%+v)", *p)
}

type AddMetaSmartChannelCPF struct {
}

func NewAddMetaSmartChannelCPF() *AddMetaSmartChannelCPF {
	return &AddMetaSmartChannelCPF{}
}

func (p *AddMetaSmartChannelCPF) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaSmartChannelCPF) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaSmartChannelCPF"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaSmartChannelCPF) Equals(other *AddMetaSmartChannelCPF) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaSmartChannelCPF) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaSmartChannelCPF(%+v)", *p)
}

type AddMetaOpenchatCPF struct {
}

func NewAddMetaOpenchatCPF() *AddMetaOpenchatCPF {
	return &AddMetaOpenchatCPF{}
}

func (p *AddMetaOpenchatCPF) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaOpenchatCPF) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaOpenchatCPF"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaOpenchatCPF) Equals(other *AddMetaOpenchatCPF) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaOpenchatCPF) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaOpenchatCPF(%+v)", *p)
}

type AddMetaBeaconBanner struct {
}

func NewAddMetaBeaconBanner() *AddMetaBeaconBanner {
	return &AddMetaBeaconBanner{}
}

func (p *AddMetaBeaconBanner) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaBeaconBanner) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaBeaconBanner"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaBeaconBanner) Equals(other *AddMetaBeaconBanner) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaBeaconBanner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaBeaconBanner(%+v)", *p)
}

type AddMetaFriendRecommendation struct {
}

func NewAddMetaFriendRecommendation() *AddMetaFriendRecommendation {
	return &AddMetaFriendRecommendation{}
}

func (p *AddMetaFriendRecommendation) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaFriendRecommendation) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaFriendRecommendation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaFriendRecommendation) Equals(other *AddMetaFriendRecommendation) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaFriendRecommendation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaFriendRecommendation(%+v)", *p)
}

type AddMetaHomeRecommendation struct {
}

func NewAddMetaHomeRecommendation() *AddMetaHomeRecommendation {
	return &AddMetaHomeRecommendation{}
}

func (p *AddMetaHomeRecommendation) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaHomeRecommendation) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaHomeRecommendation"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaHomeRecommendation) Equals(other *AddMetaHomeRecommendation) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaHomeRecommendation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaHomeRecommendation(%+v)", *p)
}

type AddMetaShareContact struct {
}

func NewAddMetaShareContact() *AddMetaShareContact {
	return &AddMetaShareContact{}
}

func (p *AddMetaShareContact) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaShareContact) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaShareContact"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaShareContact) Equals(other *AddMetaShareContact) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaShareContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaShareContact(%+v)", *p)
}

type AddMetaStrangerMessage struct {
}

func NewAddMetaStrangerMessage() *AddMetaStrangerMessage {
	return &AddMetaStrangerMessage{}
}

func (p *AddMetaStrangerMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaStrangerMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaStrangerMessage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaStrangerMessage) Equals(other *AddMetaStrangerMessage) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaStrangerMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaStrangerMessage(%+v)", *p)
}

type AddMetaStrangerCall struct {
}

func NewAddMetaStrangerCall() *AddMetaStrangerCall {
	return &AddMetaStrangerCall{}
}

func (p *AddMetaStrangerCall) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaStrangerCall) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaStrangerCall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaStrangerCall) Equals(other *AddMetaStrangerCall) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaStrangerCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaStrangerCall(%+v)", *p)
}

// Attributes:
//  - ChatMid
type AddMetaMentionInChat struct {
	ChatMid string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
}

func NewAddMetaMentionInChat() *AddMetaMentionInChat {
	return &AddMetaMentionInChat{}
}

func (p *AddMetaMentionInChat) GetChatMid() string {
	return p.ChatMid
}
func (p *AddMetaMentionInChat) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaMentionInChat) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChatMid = v
	}
	return nil
}

func (p *AddMetaMentionInChat) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaMentionInChat"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaMentionInChat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err)
	}
	return err
}

func (p *AddMetaMentionInChat) Equals(other *AddMetaMentionInChat) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ChatMid != other.ChatMid {
		return false
	}
	return true
}

func (p *AddMetaMentionInChat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaMentionInChat(%+v)", *p)
}

type AddMetaTimeline struct {
}

func NewAddMetaTimeline() *AddMetaTimeline {
	return &AddMetaTimeline{}
}

func (p *AddMetaTimeline) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaTimeline) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaTimeline"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaTimeline) Equals(other *AddMetaTimeline) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaTimeline) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaTimeline(%+v)", *p)
}

type AddMetaUnifiedSearch struct {
}

func NewAddMetaUnifiedSearch() *AddMetaUnifiedSearch {
	return &AddMetaUnifiedSearch{}
}

func (p *AddMetaUnifiedSearch) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaUnifiedSearch) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaUnifiedSearch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaUnifiedSearch) Equals(other *AddMetaUnifiedSearch) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaUnifiedSearch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaUnifiedSearch(%+v)", *p)
}

type AddMetaLineLab struct {
}

func NewAddMetaLineLab() *AddMetaLineLab {
	return &AddMetaLineLab{}
}

func (p *AddMetaLineLab) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaLineLab) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaLineLab"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaLineLab) Equals(other *AddMetaLineLab) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaLineLab) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaLineLab(%+v)", *p)
}

type AddMetaLineToCall struct {
}

func NewAddMetaLineToCall() *AddMetaLineToCall {
	return &AddMetaLineToCall{}
}

func (p *AddMetaLineToCall) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaLineToCall) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaLineToCall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaLineToCall) Equals(other *AddMetaLineToCall) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaLineToCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaLineToCall(%+v)", *p)
}

type AddMetaGroupVideoCall struct {
}

func NewAddMetaGroupVideoCall() *AddMetaGroupVideoCall {
	return &AddMetaGroupVideoCall{}
}

func (p *AddMetaGroupVideoCall) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaGroupVideoCall) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaGroupVideoCall"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaGroupVideoCall) Equals(other *AddMetaGroupVideoCall) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaGroupVideoCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaGroupVideoCall(%+v)", *p)
}

type AddMetaFriendRequest struct {
}

func NewAddMetaFriendRequest() *AddMetaFriendRequest {
	return &AddMetaFriendRequest{}
}

func (p *AddMetaFriendRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaFriendRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaFriendRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaFriendRequest) Equals(other *AddMetaFriendRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaFriendRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaFriendRequest(%+v)", *p)
}

type AddMetaLineLiveViewer struct {
}

func NewAddMetaLineLiveViewer() *AddMetaLineLiveViewer {
	return &AddMetaLineLiveViewer{}
}

func (p *AddMetaLineLiveViewer) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaLineLiveViewer) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaLineLiveViewer"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaLineLiveViewer) Equals(other *AddMetaLineLiveViewer) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaLineLiveViewer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaLineLiveViewer(%+v)", *p)
}

type AddMetaLineThings struct {
}

func NewAddMetaLineThings() *AddMetaLineThings {
	return &AddMetaLineThings{}
}

func (p *AddMetaLineThings) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaLineThings) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaLineThings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaLineThings) Equals(other *AddMetaLineThings) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaLineThings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaLineThings(%+v)", *p)
}

type AddMetaMediaCapture struct {
}

func NewAddMetaMediaCapture() *AddMetaMediaCapture {
	return &AddMetaMediaCapture{}
}

func (p *AddMetaMediaCapture) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaMediaCapture) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaMediaCapture"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaMediaCapture) Equals(other *AddMetaMediaCapture) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaMediaCapture) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaMediaCapture(%+v)", *p)
}

type AddMetaAvatarOASetting struct {
}

func NewAddMetaAvatarOASetting() *AddMetaAvatarOASetting {
	return &AddMetaAvatarOASetting{}
}

func (p *AddMetaAvatarOASetting) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaAvatarOASetting) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaAvatarOASetting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaAvatarOASetting) Equals(other *AddMetaAvatarOASetting) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaAvatarOASetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaAvatarOASetting(%+v)", *p)
}

type AddMetaUrlScheme struct {
}

func NewAddMetaUrlScheme() *AddMetaUrlScheme {
	return &AddMetaUrlScheme{}
}

func (p *AddMetaUrlScheme) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaUrlScheme) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaUrlScheme"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaUrlScheme) Equals(other *AddMetaUrlScheme) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaUrlScheme) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaUrlScheme(%+v)", *p)
}

type AddMetaAddressBook struct {
}

func NewAddMetaAddressBook() *AddMetaAddressBook {
	return &AddMetaAddressBook{}
}

func (p *AddMetaAddressBook) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaAddressBook) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaAddressBook"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaAddressBook) Equals(other *AddMetaAddressBook) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaAddressBook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaAddressBook(%+v)", *p)
}

type AddMetaUnifiedSearchOATab struct {
}

func NewAddMetaUnifiedSearchOATab() *AddMetaUnifiedSearchOATab {
	return &AddMetaUnifiedSearchOATab{}
}

func (p *AddMetaUnifiedSearchOATab) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaUnifiedSearchOATab) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaUnifiedSearchOATab"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaUnifiedSearchOATab) Equals(other *AddMetaUnifiedSearchOATab) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaUnifiedSearchOATab) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaUnifiedSearchOATab(%+v)", *p)
}

// Attributes:
//  - Hint
type AddMetaProfileUndefined struct {
	Hint string `thrift:"hint,1" db:"hint" json:"hint"`
}

func NewAddMetaProfileUndefined() *AddMetaProfileUndefined {
	return &AddMetaProfileUndefined{}
}

func (p *AddMetaProfileUndefined) GetHint() string {
	return p.Hint
}
func (p *AddMetaProfileUndefined) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaProfileUndefined) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Hint = v
	}
	return nil
}

func (p *AddMetaProfileUndefined) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaProfileUndefined"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaProfileUndefined) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "hint", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hint: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Hint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hint (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hint: ", p), err)
	}
	return err
}

func (p *AddMetaProfileUndefined) Equals(other *AddMetaProfileUndefined) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Hint != other.Hint {
		return false
	}
	return true
}

func (p *AddMetaProfileUndefined) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaProfileUndefined(%+v)", *p)
}

type AddMetaOAChatHeader struct {
}

func NewAddMetaOAChatHeader() *AddMetaOAChatHeader {
	return &AddMetaOAChatHeader{}
}

func (p *AddMetaOAChatHeader) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaOAChatHeader) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaOAChatHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaOAChatHeader) Equals(other *AddMetaOAChatHeader) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaOAChatHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaOAChatHeader(%+v)", *p)
}

type AddMetaChatMenu struct {
}

func NewAddMetaChatMenu() *AddMetaChatMenu {
	return &AddMetaChatMenu{}
}

func (p *AddMetaChatMenu) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaChatMenu) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaChatMenu"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaChatMenu) Equals(other *AddMetaChatMenu) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaChatMenu) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaChatMenu(%+v)", *p)
}

type AddMetaChatHeader struct {
}

func NewAddMetaChatHeader() *AddMetaChatHeader {
	return &AddMetaChatHeader{}
}

func (p *AddMetaChatHeader) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaChatHeader) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaChatHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaChatHeader) Equals(other *AddMetaChatHeader) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaChatHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaChatHeader(%+v)", *p)
}

type AddMetaHomeTabCPF struct {
}

func NewAddMetaHomeTabCPF() *AddMetaHomeTabCPF {
	return &AddMetaHomeTabCPF{}
}

func (p *AddMetaHomeTabCPF) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddMetaHomeTabCPF) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddMetaHomeTabCPF"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddMetaHomeTabCPF) Equals(other *AddMetaHomeTabCPF) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	return true
}

func (p *AddMetaHomeTabCPF) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddMetaHomeTabCPF(%+v)", *p)
}

// Attributes:
//  - Invalid
//  - ByPhone
//  - BySearchId
//  - ByUserTicket
//  - GroupMemberList
//  - TimelineCPF
//  - SmartChannelCPF
//  - OpenchatCPF
//  - BeaconBanner
//  - FriendRecommendation
//  - HomeRecommendation
//  - ShareContact
//  - StrangerMessage
//  - StrangerCall
//  - MentionInChat
//  - Timeline
//  - UnifiedSearch
//  - LineLab
//  - LineToCall
//  - GroupVideo
//  - FriendRequest
//  - LiveViewer
//  - LineThings
//  - MediaCapture
//  - AvatarOASetting
//  - UrlScheme
//  - AddressBook
//  - UnifiedSearchOATab
//  - ProfileUndefined
//  - OaChatHeader
//  - ChatMenu
//  - ChatHeader
//  - HomeTabCPF
type AddFriendTrackingMeta struct {
	Invalid              *AddMetaInvalid              `thrift:"invalid,1" db:"invalid" json:"invalid"`
	ByPhone              *AddMetaByPhone              `thrift:"byPhone,2" db:"byPhone" json:"byPhone"`
	BySearchId           *AddMetaBySearchId           `thrift:"bySearchId,3" db:"bySearchId" json:"bySearchId"`
	ByUserTicket         *AddMetaByUserTicket         `thrift:"byUserTicket,4" db:"byUserTicket" json:"byUserTicket"`
	GroupMemberList      *AddMetaGroupMemberList      `thrift:"groupMemberList,5" db:"groupMemberList" json:"groupMemberList"`
	TimelineCPF          *AddMetaTimelineCPF          `thrift:"timelineCPF,6" db:"timelineCPF" json:"timelineCPF"`
	SmartChannelCPF      *AddMetaSmartChannelCPF      `thrift:"smartChannelCPF,7" db:"smartChannelCPF" json:"smartChannelCPF"`
	OpenchatCPF          *AddMetaOpenchatCPF          `thrift:"openchatCPF,8" db:"openchatCPF" json:"openchatCPF"`
	BeaconBanner         *AddMetaBeaconBanner         `thrift:"beaconBanner,9" db:"beaconBanner" json:"beaconBanner"`
	FriendRecommendation *AddMetaFriendRecommendation `thrift:"friendRecommendation,10" db:"friendRecommendation" json:"friendRecommendation"`
	HomeRecommendation   *AddMetaHomeRecommendation   `thrift:"homeRecommendation,11" db:"homeRecommendation" json:"homeRecommendation"`
	ShareContact         *AddMetaShareContact         `thrift:"shareContact,12" db:"shareContact" json:"shareContact"`
	StrangerMessage      *AddMetaStrangerMessage      `thrift:"strangerMessage,13" db:"strangerMessage" json:"strangerMessage"`
	StrangerCall         *AddMetaStrangerCall         `thrift:"strangerCall,14" db:"strangerCall" json:"strangerCall"`
	MentionInChat        *AddMetaMentionInChat        `thrift:"mentionInChat,15" db:"mentionInChat" json:"mentionInChat"`
	Timeline             *AddMetaTimeline             `thrift:"timeline,16" db:"timeline" json:"timeline"`
	UnifiedSearch        *AddMetaUnifiedSearch        `thrift:"unifiedSearch,17" db:"unifiedSearch" json:"unifiedSearch"`
	LineLab              *AddMetaLineLab              `thrift:"lineLab,18" db:"lineLab" json:"lineLab"`
	LineToCall           *AddMetaLineToCall           `thrift:"lineToCall,19" db:"lineToCall" json:"lineToCall"`
	GroupVideo           *AddMetaGroupVideoCall       `thrift:"groupVideo,20" db:"groupVideo" json:"groupVideo"`
	FriendRequest        *AddMetaFriendRequest        `thrift:"friendRequest,21" db:"friendRequest" json:"friendRequest"`
	LiveViewer           *AddMetaLineLiveViewer       `thrift:"liveViewer,22" db:"liveViewer" json:"liveViewer"`
	LineThings           *AddMetaLineThings           `thrift:"lineThings,23" db:"lineThings" json:"lineThings"`
	MediaCapture         *AddMetaMediaCapture         `thrift:"mediaCapture,24" db:"mediaCapture" json:"mediaCapture"`
	AvatarOASetting      *AddMetaAvatarOASetting      `thrift:"avatarOASetting,25" db:"avatarOASetting" json:"avatarOASetting"`
	UrlScheme            *AddMetaUrlScheme            `thrift:"urlScheme,26" db:"urlScheme" json:"urlScheme"`
	AddressBook          *AddMetaAddressBook          `thrift:"addressBook,27" db:"addressBook" json:"addressBook"`
	UnifiedSearchOATab   *AddMetaUnifiedSearchOATab   `thrift:"unifiedSearchOATab,28" db:"unifiedSearchOATab" json:"unifiedSearchOATab"`
	ProfileUndefined     *AddMetaProfileUndefined     `thrift:"profileUndefined,29" db:"profileUndefined" json:"profileUndefined"`
	OaChatHeader         *AddMetaOAChatHeader         `thrift:"oaChatHeader,30" db:"oaChatHeader" json:"oaChatHeader"`
	ChatMenu             *AddMetaChatMenu             `thrift:"chatMenu,31" db:"chatMenu" json:"chatMenu"`
	ChatHeader           *AddMetaChatHeader           `thrift:"chatHeader,32" db:"chatHeader" json:"chatHeader"`
	HomeTabCPF           *AddMetaHomeTabCPF           `thrift:"homeTabCPF,33" db:"homeTabCPF" json:"homeTabCPF"`
}

func NewAddFriendTrackingMeta() *AddFriendTrackingMeta {
	return &AddFriendTrackingMeta{}
}

var AddFriendTrackingMeta_Invalid_DEFAULT *AddMetaInvalid

func (p *AddFriendTrackingMeta) GetInvalid() *AddMetaInvalid {
	if !p.IsSetInvalid() {
		return AddFriendTrackingMeta_Invalid_DEFAULT
	}
	return p.Invalid
}

var AddFriendTrackingMeta_ByPhone_DEFAULT *AddMetaByPhone

func (p *AddFriendTrackingMeta) GetByPhone() *AddMetaByPhone {
	if !p.IsSetByPhone() {
		return AddFriendTrackingMeta_ByPhone_DEFAULT
	}
	return p.ByPhone
}

var AddFriendTrackingMeta_BySearchId_DEFAULT *AddMetaBySearchId

func (p *AddFriendTrackingMeta) GetBySearchId() *AddMetaBySearchId {
	if !p.IsSetBySearchId() {
		return AddFriendTrackingMeta_BySearchId_DEFAULT
	}
	return p.BySearchId
}

var AddFriendTrackingMeta_ByUserTicket_DEFAULT *AddMetaByUserTicket

func (p *AddFriendTrackingMeta) GetByUserTicket() *AddMetaByUserTicket {
	if !p.IsSetByUserTicket() {
		return AddFriendTrackingMeta_ByUserTicket_DEFAULT
	}
	return p.ByUserTicket
}

var AddFriendTrackingMeta_GroupMemberList_DEFAULT *AddMetaGroupMemberList

func (p *AddFriendTrackingMeta) GetGroupMemberList() *AddMetaGroupMemberList {
	if !p.IsSetGroupMemberList() {
		return AddFriendTrackingMeta_GroupMemberList_DEFAULT
	}
	return p.GroupMemberList
}

var AddFriendTrackingMeta_TimelineCPF_DEFAULT *AddMetaTimelineCPF

func (p *AddFriendTrackingMeta) GetTimelineCPF() *AddMetaTimelineCPF {
	if !p.IsSetTimelineCPF() {
		return AddFriendTrackingMeta_TimelineCPF_DEFAULT
	}
	return p.TimelineCPF
}

var AddFriendTrackingMeta_SmartChannelCPF_DEFAULT *AddMetaSmartChannelCPF

func (p *AddFriendTrackingMeta) GetSmartChannelCPF() *AddMetaSmartChannelCPF {
	if !p.IsSetSmartChannelCPF() {
		return AddFriendTrackingMeta_SmartChannelCPF_DEFAULT
	}
	return p.SmartChannelCPF
}

var AddFriendTrackingMeta_OpenchatCPF_DEFAULT *AddMetaOpenchatCPF

func (p *AddFriendTrackingMeta) GetOpenchatCPF() *AddMetaOpenchatCPF {
	if !p.IsSetOpenchatCPF() {
		return AddFriendTrackingMeta_OpenchatCPF_DEFAULT
	}
	return p.OpenchatCPF
}

var AddFriendTrackingMeta_BeaconBanner_DEFAULT *AddMetaBeaconBanner

func (p *AddFriendTrackingMeta) GetBeaconBanner() *AddMetaBeaconBanner {
	if !p.IsSetBeaconBanner() {
		return AddFriendTrackingMeta_BeaconBanner_DEFAULT
	}
	return p.BeaconBanner
}

var AddFriendTrackingMeta_FriendRecommendation_DEFAULT *AddMetaFriendRecommendation

func (p *AddFriendTrackingMeta) GetFriendRecommendation() *AddMetaFriendRecommendation {
	if !p.IsSetFriendRecommendation() {
		return AddFriendTrackingMeta_FriendRecommendation_DEFAULT
	}
	return p.FriendRecommendation
}

var AddFriendTrackingMeta_HomeRecommendation_DEFAULT *AddMetaHomeRecommendation

func (p *AddFriendTrackingMeta) GetHomeRecommendation() *AddMetaHomeRecommendation {
	if !p.IsSetHomeRecommendation() {
		return AddFriendTrackingMeta_HomeRecommendation_DEFAULT
	}
	return p.HomeRecommendation
}

var AddFriendTrackingMeta_ShareContact_DEFAULT *AddMetaShareContact

func (p *AddFriendTrackingMeta) GetShareContact() *AddMetaShareContact {
	if !p.IsSetShareContact() {
		return AddFriendTrackingMeta_ShareContact_DEFAULT
	}
	return p.ShareContact
}

var AddFriendTrackingMeta_StrangerMessage_DEFAULT *AddMetaStrangerMessage

func (p *AddFriendTrackingMeta) GetStrangerMessage() *AddMetaStrangerMessage {
	if !p.IsSetStrangerMessage() {
		return AddFriendTrackingMeta_StrangerMessage_DEFAULT
	}
	return p.StrangerMessage
}

var AddFriendTrackingMeta_StrangerCall_DEFAULT *AddMetaStrangerCall

func (p *AddFriendTrackingMeta) GetStrangerCall() *AddMetaStrangerCall {
	if !p.IsSetStrangerCall() {
		return AddFriendTrackingMeta_StrangerCall_DEFAULT
	}
	return p.StrangerCall
}

var AddFriendTrackingMeta_MentionInChat_DEFAULT *AddMetaMentionInChat

func (p *AddFriendTrackingMeta) GetMentionInChat() *AddMetaMentionInChat {
	if !p.IsSetMentionInChat() {
		return AddFriendTrackingMeta_MentionInChat_DEFAULT
	}
	return p.MentionInChat
}

var AddFriendTrackingMeta_Timeline_DEFAULT *AddMetaTimeline

func (p *AddFriendTrackingMeta) GetTimeline() *AddMetaTimeline {
	if !p.IsSetTimeline() {
		return AddFriendTrackingMeta_Timeline_DEFAULT
	}
	return p.Timeline
}

var AddFriendTrackingMeta_UnifiedSearch_DEFAULT *AddMetaUnifiedSearch

func (p *AddFriendTrackingMeta) GetUnifiedSearch() *AddMetaUnifiedSearch {
	if !p.IsSetUnifiedSearch() {
		return AddFriendTrackingMeta_UnifiedSearch_DEFAULT
	}
	return p.UnifiedSearch
}

var AddFriendTrackingMeta_LineLab_DEFAULT *AddMetaLineLab

func (p *AddFriendTrackingMeta) GetLineLab() *AddMetaLineLab {
	if !p.IsSetLineLab() {
		return AddFriendTrackingMeta_LineLab_DEFAULT
	}
	return p.LineLab
}

var AddFriendTrackingMeta_LineToCall_DEFAULT *AddMetaLineToCall

func (p *AddFriendTrackingMeta) GetLineToCall() *AddMetaLineToCall {
	if !p.IsSetLineToCall() {
		return AddFriendTrackingMeta_LineToCall_DEFAULT
	}
	return p.LineToCall
}

var AddFriendTrackingMeta_GroupVideo_DEFAULT *AddMetaGroupVideoCall

func (p *AddFriendTrackingMeta) GetGroupVideo() *AddMetaGroupVideoCall {
	if !p.IsSetGroupVideo() {
		return AddFriendTrackingMeta_GroupVideo_DEFAULT
	}
	return p.GroupVideo
}

var AddFriendTrackingMeta_FriendRequest_DEFAULT *AddMetaFriendRequest

func (p *AddFriendTrackingMeta) GetFriendRequest() *AddMetaFriendRequest {
	if !p.IsSetFriendRequest() {
		return AddFriendTrackingMeta_FriendRequest_DEFAULT
	}
	return p.FriendRequest
}

var AddFriendTrackingMeta_LiveViewer_DEFAULT *AddMetaLineLiveViewer

func (p *AddFriendTrackingMeta) GetLiveViewer() *AddMetaLineLiveViewer {
	if !p.IsSetLiveViewer() {
		return AddFriendTrackingMeta_LiveViewer_DEFAULT
	}
	return p.LiveViewer
}

var AddFriendTrackingMeta_LineThings_DEFAULT *AddMetaLineThings

func (p *AddFriendTrackingMeta) GetLineThings() *AddMetaLineThings {
	if !p.IsSetLineThings() {
		return AddFriendTrackingMeta_LineThings_DEFAULT
	}
	return p.LineThings
}

var AddFriendTrackingMeta_MediaCapture_DEFAULT *AddMetaMediaCapture

func (p *AddFriendTrackingMeta) GetMediaCapture() *AddMetaMediaCapture {
	if !p.IsSetMediaCapture() {
		return AddFriendTrackingMeta_MediaCapture_DEFAULT
	}
	return p.MediaCapture
}

var AddFriendTrackingMeta_AvatarOASetting_DEFAULT *AddMetaAvatarOASetting

func (p *AddFriendTrackingMeta) GetAvatarOASetting() *AddMetaAvatarOASetting {
	if !p.IsSetAvatarOASetting() {
		return AddFriendTrackingMeta_AvatarOASetting_DEFAULT
	}
	return p.AvatarOASetting
}

var AddFriendTrackingMeta_UrlScheme_DEFAULT *AddMetaUrlScheme

func (p *AddFriendTrackingMeta) GetUrlScheme() *AddMetaUrlScheme {
	if !p.IsSetUrlScheme() {
		return AddFriendTrackingMeta_UrlScheme_DEFAULT
	}
	return p.UrlScheme
}

var AddFriendTrackingMeta_AddressBook_DEFAULT *AddMetaAddressBook

func (p *AddFriendTrackingMeta) GetAddressBook() *AddMetaAddressBook {
	if !p.IsSetAddressBook() {
		return AddFriendTrackingMeta_AddressBook_DEFAULT
	}
	return p.AddressBook
}

var AddFriendTrackingMeta_UnifiedSearchOATab_DEFAULT *AddMetaUnifiedSearchOATab

func (p *AddFriendTrackingMeta) GetUnifiedSearchOATab() *AddMetaUnifiedSearchOATab {
	if !p.IsSetUnifiedSearchOATab() {
		return AddFriendTrackingMeta_UnifiedSearchOATab_DEFAULT
	}
	return p.UnifiedSearchOATab
}

var AddFriendTrackingMeta_ProfileUndefined_DEFAULT *AddMetaProfileUndefined

func (p *AddFriendTrackingMeta) GetProfileUndefined() *AddMetaProfileUndefined {
	if !p.IsSetProfileUndefined() {
		return AddFriendTrackingMeta_ProfileUndefined_DEFAULT
	}
	return p.ProfileUndefined
}

var AddFriendTrackingMeta_OaChatHeader_DEFAULT *AddMetaOAChatHeader

func (p *AddFriendTrackingMeta) GetOaChatHeader() *AddMetaOAChatHeader {
	if !p.IsSetOaChatHeader() {
		return AddFriendTrackingMeta_OaChatHeader_DEFAULT
	}
	return p.OaChatHeader
}

var AddFriendTrackingMeta_ChatMenu_DEFAULT *AddMetaChatMenu

func (p *AddFriendTrackingMeta) GetChatMenu() *AddMetaChatMenu {
	if !p.IsSetChatMenu() {
		return AddFriendTrackingMeta_ChatMenu_DEFAULT
	}
	return p.ChatMenu
}

var AddFriendTrackingMeta_ChatHeader_DEFAULT *AddMetaChatHeader

func (p *AddFriendTrackingMeta) GetChatHeader() *AddMetaChatHeader {
	if !p.IsSetChatHeader() {
		return AddFriendTrackingMeta_ChatHeader_DEFAULT
	}
	return p.ChatHeader
}

var AddFriendTrackingMeta_HomeTabCPF_DEFAULT *AddMetaHomeTabCPF

func (p *AddFriendTrackingMeta) GetHomeTabCPF() *AddMetaHomeTabCPF {
	if !p.IsSetHomeTabCPF() {
		return AddFriendTrackingMeta_HomeTabCPF_DEFAULT
	}
	return p.HomeTabCPF
}
func (p *AddFriendTrackingMeta) IsSetInvalid() bool {
	return p.Invalid != nil
}

func (p *AddFriendTrackingMeta) IsSetByPhone() bool {
	return p.ByPhone != nil
}

func (p *AddFriendTrackingMeta) IsSetBySearchId() bool {
	return p.BySearchId != nil
}

func (p *AddFriendTrackingMeta) IsSetByUserTicket() bool {
	return p.ByUserTicket != nil
}

func (p *AddFriendTrackingMeta) IsSetGroupMemberList() bool {
	return p.GroupMemberList != nil
}

func (p *AddFriendTrackingMeta) IsSetTimelineCPF() bool {
	return p.TimelineCPF != nil
}

func (p *AddFriendTrackingMeta) IsSetSmartChannelCPF() bool {
	return p.SmartChannelCPF != nil
}

func (p *AddFriendTrackingMeta) IsSetOpenchatCPF() bool {
	return p.OpenchatCPF != nil
}

func (p *AddFriendTrackingMeta) IsSetBeaconBanner() bool {
	return p.BeaconBanner != nil
}

func (p *AddFriendTrackingMeta) IsSetFriendRecommendation() bool {
	return p.FriendRecommendation != nil
}

func (p *AddFriendTrackingMeta) IsSetHomeRecommendation() bool {
	return p.HomeRecommendation != nil
}

func (p *AddFriendTrackingMeta) IsSetShareContact() bool {
	return p.ShareContact != nil
}

func (p *AddFriendTrackingMeta) IsSetStrangerMessage() bool {
	return p.StrangerMessage != nil
}

func (p *AddFriendTrackingMeta) IsSetStrangerCall() bool {
	return p.StrangerCall != nil
}

func (p *AddFriendTrackingMeta) IsSetMentionInChat() bool {
	return p.MentionInChat != nil
}

func (p *AddFriendTrackingMeta) IsSetTimeline() bool {
	return p.Timeline != nil
}

func (p *AddFriendTrackingMeta) IsSetUnifiedSearch() bool {
	return p.UnifiedSearch != nil
}

func (p *AddFriendTrackingMeta) IsSetLineLab() bool {
	return p.LineLab != nil
}

func (p *AddFriendTrackingMeta) IsSetLineToCall() bool {
	return p.LineToCall != nil
}

func (p *AddFriendTrackingMeta) IsSetGroupVideo() bool {
	return p.GroupVideo != nil
}

func (p *AddFriendTrackingMeta) IsSetFriendRequest() bool {
	return p.FriendRequest != nil
}

func (p *AddFriendTrackingMeta) IsSetLiveViewer() bool {
	return p.LiveViewer != nil
}

func (p *AddFriendTrackingMeta) IsSetLineThings() bool {
	return p.LineThings != nil
}

func (p *AddFriendTrackingMeta) IsSetMediaCapture() bool {
	return p.MediaCapture != nil
}

func (p *AddFriendTrackingMeta) IsSetAvatarOASetting() bool {
	return p.AvatarOASetting != nil
}

func (p *AddFriendTrackingMeta) IsSetUrlScheme() bool {
	return p.UrlScheme != nil
}

func (p *AddFriendTrackingMeta) IsSetAddressBook() bool {
	return p.AddressBook != nil
}

func (p *AddFriendTrackingMeta) IsSetUnifiedSearchOATab() bool {
	return p.UnifiedSearchOATab != nil
}

func (p *AddFriendTrackingMeta) IsSetProfileUndefined() bool {
	return p.ProfileUndefined != nil
}

func (p *AddFriendTrackingMeta) IsSetOaChatHeader() bool {
	return p.OaChatHeader != nil
}

func (p *AddFriendTrackingMeta) IsSetChatMenu() bool {
	return p.ChatMenu != nil
}

func (p *AddFriendTrackingMeta) IsSetChatHeader() bool {
	return p.ChatHeader != nil
}

func (p *AddFriendTrackingMeta) IsSetHomeTabCPF() bool {
	return p.HomeTabCPF != nil
}

func (p *AddFriendTrackingMeta) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField7(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField8(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField9(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField10(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField13(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField15(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField16(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField17(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField18(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField19(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField20(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField21(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField22(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField23(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField24(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField25(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField26(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField27(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField28(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField29(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField31(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField32(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 33:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField33(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Invalid = &AddMetaInvalid{}
	if err := p.Invalid.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Invalid), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.ByPhone = &AddMetaByPhone{}
	if err := p.ByPhone.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByPhone), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.BySearchId = &AddMetaBySearchId{}
	if err := p.BySearchId.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BySearchId), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	p.ByUserTicket = &AddMetaByUserTicket{}
	if err := p.ByUserTicket.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByUserTicket), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	p.GroupMemberList = &AddMetaGroupMemberList{}
	if err := p.GroupMemberList.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupMemberList), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	p.TimelineCPF = &AddMetaTimelineCPF{}
	if err := p.TimelineCPF.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimelineCPF), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
	p.SmartChannelCPF = &AddMetaSmartChannelCPF{}
	if err := p.SmartChannelCPF.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SmartChannelCPF), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
	p.OpenchatCPF = &AddMetaOpenchatCPF{}
	if err := p.OpenchatCPF.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OpenchatCPF), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
	p.BeaconBanner = &AddMetaBeaconBanner{}
	if err := p.BeaconBanner.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BeaconBanner), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
	p.FriendRecommendation = &AddMetaFriendRecommendation{}
	if err := p.FriendRecommendation.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FriendRecommendation), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
	p.HomeRecommendation = &AddMetaHomeRecommendation{}
	if err := p.HomeRecommendation.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HomeRecommendation), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
	p.ShareContact = &AddMetaShareContact{}
	if err := p.ShareContact.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShareContact), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
	p.StrangerMessage = &AddMetaStrangerMessage{}
	if err := p.StrangerMessage.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StrangerMessage), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
	p.StrangerCall = &AddMetaStrangerCall{}
	if err := p.StrangerCall.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StrangerCall), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
	p.MentionInChat = &AddMetaMentionInChat{}
	if err := p.MentionInChat.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MentionInChat), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
	p.Timeline = &AddMetaTimeline{}
	if err := p.Timeline.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Timeline), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
	p.UnifiedSearch = &AddMetaUnifiedSearch{}
	if err := p.UnifiedSearch.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnifiedSearch), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
	p.LineLab = &AddMetaLineLab{}
	if err := p.LineLab.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LineLab), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
	p.LineToCall = &AddMetaLineToCall{}
	if err := p.LineToCall.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LineToCall), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
	p.GroupVideo = &AddMetaGroupVideoCall{}
	if err := p.GroupVideo.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupVideo), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
	p.FriendRequest = &AddMetaFriendRequest{}
	if err := p.FriendRequest.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FriendRequest), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
	p.LiveViewer = &AddMetaLineLiveViewer{}
	if err := p.LiveViewer.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LiveViewer), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
	p.LineThings = &AddMetaLineThings{}
	if err := p.LineThings.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LineThings), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
	p.MediaCapture = &AddMetaMediaCapture{}
	if err := p.MediaCapture.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaCapture), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
	p.AvatarOASetting = &AddMetaAvatarOASetting{}
	if err := p.AvatarOASetting.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarOASetting), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
	p.UrlScheme = &AddMetaUrlScheme{}
	if err := p.UrlScheme.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UrlScheme), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
	p.AddressBook = &AddMetaAddressBook{}
	if err := p.AddressBook.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddressBook), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
	p.UnifiedSearchOATab = &AddMetaUnifiedSearchOATab{}
	if err := p.UnifiedSearchOATab.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnifiedSearchOATab), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
	p.ProfileUndefined = &AddMetaProfileUndefined{}
	if err := p.ProfileUndefined.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProfileUndefined), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
	p.OaChatHeader = &AddMetaOAChatHeader{}
	if err := p.OaChatHeader.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OaChatHeader), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
	p.ChatMenu = &AddMetaChatMenu{}
	if err := p.ChatMenu.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChatMenu), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
	p.ChatHeader = &AddMetaChatHeader{}
	if err := p.ChatHeader.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChatHeader), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
	p.HomeTabCPF = &AddMetaHomeTabCPF{}
	if err := p.HomeTabCPF.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HomeTabCPF), err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFriendTrackingMeta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if p.Invalid != nil {
			if err := p.writeField1(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ByPhone != nil {
			if err := p.writeField2(ctx, oprot); err != nil {
				return err
			}
		}
		if p.BySearchId != nil {
			if err := p.writeField3(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ByUserTicket != nil {
			if err := p.writeField4(ctx, oprot); err != nil {
				return err
			}
		}
		if p.GroupMemberList != nil {
			if err := p.writeField5(ctx, oprot); err != nil {
				return err
			}
		}
		if p.TimelineCPF != nil {
			if err := p.writeField6(ctx, oprot); err != nil {
				return err
			}
		}
		if p.SmartChannelCPF != nil {
			if err := p.writeField7(ctx, oprot); err != nil {
				return err
			}
		}
		if p.OpenchatCPF != nil {
			if err := p.writeField8(ctx, oprot); err != nil {
				return err
			}
		}
		if p.BeaconBanner != nil {
			if err := p.writeField9(ctx, oprot); err != nil {
				return err
			}
		}
		if p.FriendRecommendation != nil {
			if err := p.writeField10(ctx, oprot); err != nil {
				return err
			}
		}
		if p.HomeRecommendation != nil {
			if err := p.writeField11(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ShareContact != nil {
			if err := p.writeField12(ctx, oprot); err != nil {
				return err
			}
		}
		if p.StrangerMessage != nil {
			if err := p.writeField13(ctx, oprot); err != nil {
				return err
			}
		}
		if p.StrangerCall != nil {
			if err := p.writeField14(ctx, oprot); err != nil {
				return err
			}
		}
		if p.MentionInChat != nil {
			if err := p.writeField15(ctx, oprot); err != nil {
				return err
			}
		}
		if p.Timeline != nil {
			if err := p.writeField16(ctx, oprot); err != nil {
				return err
			}
		}
		if p.UnifiedSearch != nil {
			if err := p.writeField17(ctx, oprot); err != nil {
				return err
			}
		}
		if p.LineLab != nil {
			if err := p.writeField18(ctx, oprot); err != nil {
				return err
			}
		}
		if p.LineToCall != nil {
			if err := p.writeField19(ctx, oprot); err != nil {
				return err
			}
		}
		if p.GroupVideo != nil {
			if err := p.writeField20(ctx, oprot); err != nil {
				return err
			}
		}
		if p.FriendRequest != nil {
			if err := p.writeField21(ctx, oprot); err != nil {
				return err
			}
		}
		if p.LiveViewer != nil {
			if err := p.writeField22(ctx, oprot); err != nil {
				return err
			}
		}
		if p.LineThings != nil {
			if err := p.writeField23(ctx, oprot); err != nil {
				return err
			}
		}
		if p.MediaCapture != nil {
			if err := p.writeField24(ctx, oprot); err != nil {
				return err
			}
		}
		if p.AvatarOASetting != nil {
			if err := p.writeField25(ctx, oprot); err != nil {
				return err
			}
		}
		if p.UrlScheme != nil {
			if err := p.writeField26(ctx, oprot); err != nil {
				return err
			}
		}
		if p.AddressBook != nil {
			if err := p.writeField27(ctx, oprot); err != nil {
				return err
			}
		}
		if p.UnifiedSearchOATab != nil {
			if err := p.writeField28(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ProfileUndefined != nil {
			if err := p.writeField29(ctx, oprot); err != nil {
				return err
			}
		}
		if p.OaChatHeader != nil {
			if err := p.writeField30(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ChatMenu != nil {
			if err := p.writeField31(ctx, oprot); err != nil {
				return err
			}
		}
		if p.ChatHeader != nil {
			if err := p.writeField32(ctx, oprot); err != nil {
				return err
			}
		}
		if p.HomeTabCPF != nil {
			if err := p.writeField33(ctx, oprot); err != nil {
				return err
			}
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendTrackingMeta) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "invalid", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invalid: ", p), err)
	}
	if err := p.Invalid.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Invalid), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invalid: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "byPhone", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byPhone: ", p), err)
	}
	if err := p.ByPhone.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByPhone), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byPhone: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "bySearchId", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:bySearchId: ", p), err)
	}
	if err := p.BySearchId.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BySearchId), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:bySearchId: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "byUserTicket", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:byUserTicket: ", p), err)
	}
	if err := p.ByUserTicket.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByUserTicket), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:byUserTicket: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groupMemberList", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:groupMemberList: ", p), err)
	}
	if err := p.GroupMemberList.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupMemberList), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:groupMemberList: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timelineCPF", thrift.STRUCT, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timelineCPF: ", p), err)
	}
	if err := p.TimelineCPF.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimelineCPF), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timelineCPF: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "smartChannelCPF", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:smartChannelCPF: ", p), err)
	}
	if err := p.SmartChannelCPF.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SmartChannelCPF), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:smartChannelCPF: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "openchatCPF", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:openchatCPF: ", p), err)
	}
	if err := p.OpenchatCPF.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OpenchatCPF), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:openchatCPF: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "beaconBanner", thrift.STRUCT, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:beaconBanner: ", p), err)
	}
	if err := p.BeaconBanner.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BeaconBanner), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:beaconBanner: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "friendRecommendation", thrift.STRUCT, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:friendRecommendation: ", p), err)
	}
	if err := p.FriendRecommendation.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FriendRecommendation), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:friendRecommendation: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "homeRecommendation", thrift.STRUCT, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:homeRecommendation: ", p), err)
	}
	if err := p.HomeRecommendation.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HomeRecommendation), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:homeRecommendation: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "shareContact", thrift.STRUCT, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:shareContact: ", p), err)
	}
	if err := p.ShareContact.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShareContact), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:shareContact: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "strangerMessage", thrift.STRUCT, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:strangerMessage: ", p), err)
	}
	if err := p.StrangerMessage.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StrangerMessage), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:strangerMessage: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "strangerCall", thrift.STRUCT, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:strangerCall: ", p), err)
	}
	if err := p.StrangerCall.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StrangerCall), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:strangerCall: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mentionInChat", thrift.STRUCT, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:mentionInChat: ", p), err)
	}
	if err := p.MentionInChat.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MentionInChat), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:mentionInChat: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timeline", thrift.STRUCT, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:timeline: ", p), err)
	}
	if err := p.Timeline.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Timeline), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:timeline: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "unifiedSearch", thrift.STRUCT, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:unifiedSearch: ", p), err)
	}
	if err := p.UnifiedSearch.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnifiedSearch), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:unifiedSearch: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lineLab", thrift.STRUCT, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:lineLab: ", p), err)
	}
	if err := p.LineLab.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LineLab), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:lineLab: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lineToCall", thrift.STRUCT, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:lineToCall: ", p), err)
	}
	if err := p.LineToCall.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LineToCall), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:lineToCall: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "groupVideo", thrift.STRUCT, 20); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:groupVideo: ", p), err)
	}
	if err := p.GroupVideo.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupVideo), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 20:groupVideo: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "friendRequest", thrift.STRUCT, 21); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:friendRequest: ", p), err)
	}
	if err := p.FriendRequest.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FriendRequest), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 21:friendRequest: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "liveViewer", thrift.STRUCT, 22); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:liveViewer: ", p), err)
	}
	if err := p.LiveViewer.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LiveViewer), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 22:liveViewer: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "lineThings", thrift.STRUCT, 23); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:lineThings: ", p), err)
	}
	if err := p.LineThings.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LineThings), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 23:lineThings: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "mediaCapture", thrift.STRUCT, 24); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:mediaCapture: ", p), err)
	}
	if err := p.MediaCapture.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaCapture), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 24:mediaCapture: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "avatarOASetting", thrift.STRUCT, 25); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:avatarOASetting: ", p), err)
	}
	if err := p.AvatarOASetting.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarOASetting), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 25:avatarOASetting: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "urlScheme", thrift.STRUCT, 26); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:urlScheme: ", p), err)
	}
	if err := p.UrlScheme.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UrlScheme), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 26:urlScheme: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "addressBook", thrift.STRUCT, 27); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:addressBook: ", p), err)
	}
	if err := p.AddressBook.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddressBook), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 27:addressBook: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "unifiedSearchOATab", thrift.STRUCT, 28); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:unifiedSearchOATab: ", p), err)
	}
	if err := p.UnifiedSearchOATab.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnifiedSearchOATab), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 28:unifiedSearchOATab: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "profileUndefined", thrift.STRUCT, 29); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:profileUndefined: ", p), err)
	}
	if err := p.ProfileUndefined.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProfileUndefined), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 29:profileUndefined: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "oaChatHeader", thrift.STRUCT, 30); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:oaChatHeader: ", p), err)
	}
	if err := p.OaChatHeader.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OaChatHeader), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 30:oaChatHeader: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMenu", thrift.STRUCT, 31); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:chatMenu: ", p), err)
	}
	if err := p.ChatMenu.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChatMenu), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 31:chatMenu: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatHeader", thrift.STRUCT, 32); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:chatHeader: ", p), err)
	}
	if err := p.ChatHeader.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChatHeader), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 32:chatHeader: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "homeTabCPF", thrift.STRUCT, 33); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:homeTabCPF: ", p), err)
	}
	if err := p.HomeTabCPF.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HomeTabCPF), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 33:homeTabCPF: ", p), err)
	}
	return err
}

func (p *AddFriendTrackingMeta) Equals(other *AddFriendTrackingMeta) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Invalid.Equals(other.Invalid) {
		return false
	}
	if !p.ByPhone.Equals(other.ByPhone) {
		return false
	}
	if !p.BySearchId.Equals(other.BySearchId) {
		return false
	}
	if !p.ByUserTicket.Equals(other.ByUserTicket) {
		return false
	}
	if !p.GroupMemberList.Equals(other.GroupMemberList) {
		return false
	}
	if !p.TimelineCPF.Equals(other.TimelineCPF) {
		return false
	}
	if !p.SmartChannelCPF.Equals(other.SmartChannelCPF) {
		return false
	}
	if !p.OpenchatCPF.Equals(other.OpenchatCPF) {
		return false
	}
	if !p.BeaconBanner.Equals(other.BeaconBanner) {
		return false
	}
	if !p.FriendRecommendation.Equals(other.FriendRecommendation) {
		return false
	}
	if !p.HomeRecommendation.Equals(other.HomeRecommendation) {
		return false
	}
	if !p.ShareContact.Equals(other.ShareContact) {
		return false
	}
	if !p.StrangerMessage.Equals(other.StrangerMessage) {
		return false
	}
	if !p.StrangerCall.Equals(other.StrangerCall) {
		return false
	}
	if !p.MentionInChat.Equals(other.MentionInChat) {
		return false
	}
	if !p.Timeline.Equals(other.Timeline) {
		return false
	}
	if !p.UnifiedSearch.Equals(other.UnifiedSearch) {
		return false
	}
	if !p.LineLab.Equals(other.LineLab) {
		return false
	}
	if !p.LineToCall.Equals(other.LineToCall) {
		return false
	}
	if !p.GroupVideo.Equals(other.GroupVideo) {
		return false
	}
	if !p.FriendRequest.Equals(other.FriendRequest) {
		return false
	}
	if !p.LiveViewer.Equals(other.LiveViewer) {
		return false
	}
	if !p.LineThings.Equals(other.LineThings) {
		return false
	}
	if !p.MediaCapture.Equals(other.MediaCapture) {
		return false
	}
	if !p.AvatarOASetting.Equals(other.AvatarOASetting) {
		return false
	}
	if !p.UrlScheme.Equals(other.UrlScheme) {
		return false
	}
	if !p.AddressBook.Equals(other.AddressBook) {
		return false
	}
	if !p.UnifiedSearchOATab.Equals(other.UnifiedSearchOATab) {
		return false
	}
	if !p.ProfileUndefined.Equals(other.ProfileUndefined) {
		return false
	}
	if !p.OaChatHeader.Equals(other.OaChatHeader) {
		return false
	}
	if !p.ChatMenu.Equals(other.ChatMenu) {
		return false
	}
	if !p.ChatHeader.Equals(other.ChatHeader) {
		return false
	}
	if !p.HomeTabCPF.Equals(other.HomeTabCPF) {
		return false
	}
	return true
}

func (p *AddFriendTrackingMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendTrackingMeta(%+v)", *p)
}

// Attributes:
//  - Reference
//  - TrackingMeta
type AddFriendTracking struct {
	Reference    string                 `thrift:"reference,1" db:"reference" json:"reference"`
	TrackingMeta *AddFriendTrackingMeta `thrift:"trackingMeta,2" db:"trackingMeta" json:"trackingMeta"`
}

func NewAddFriendTracking() *AddFriendTracking {
	return &AddFriendTracking{}
}

func (p *AddFriendTracking) GetReference() string {
	return p.Reference
}

var AddFriendTracking_TrackingMeta_DEFAULT *AddFriendTrackingMeta

func (p *AddFriendTracking) GetTrackingMeta() *AddFriendTrackingMeta {
	if !p.IsSetTrackingMeta() {
		return AddFriendTracking_TrackingMeta_DEFAULT
	}
	return p.TrackingMeta
}
func (p *AddFriendTracking) IsSetTrackingMeta() bool {
	return p.TrackingMeta != nil
}

func (p *AddFriendTracking) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendTracking) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Reference = v
	}
	return nil
}

func (p *AddFriendTracking) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.TrackingMeta = &AddFriendTrackingMeta{}
	if err := p.TrackingMeta.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TrackingMeta), err)
	}
	return nil
}

func (p *AddFriendTracking) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFriendTracking"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendTracking) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reference: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Reference)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reference (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reference: ", p), err)
	}
	return err
}

func (p *AddFriendTracking) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "trackingMeta", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trackingMeta: ", p), err)
	}
	if err := p.TrackingMeta.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TrackingMeta), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trackingMeta: ", p), err)
	}
	return err
}

func (p *AddFriendTracking) Equals(other *AddFriendTracking) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.Reference != other.Reference {
		return false
	}
	if !p.TrackingMeta.Equals(other.TrackingMeta) {
		return false
	}
	return true
}

func (p *AddFriendTracking) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendTracking(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - UserMid
//  - Tracking
type AddFriendByMidRequest struct {
	ReqSeq   int32              `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
	UserMid  string             `thrift:"userMid,2" db:"userMid" json:"userMid"`
	Tracking *AddFriendTracking `thrift:"tracking,3" db:"tracking" json:"tracking"`
}

func NewAddFriendByMidRequest() *AddFriendByMidRequest {
	return &AddFriendByMidRequest{}
}

func (p *AddFriendByMidRequest) GetReqSeq() int32 {
	return p.ReqSeq
}

func (p *AddFriendByMidRequest) GetUserMid() string {
	return p.UserMid
}

var AddFriendByMidRequest_Tracking_DEFAULT *AddFriendTracking

func (p *AddFriendByMidRequest) GetTracking() *AddFriendTracking {
	if !p.IsSetTracking() {
		return AddFriendByMidRequest_Tracking_DEFAULT
	}
	return p.Tracking
}
func (p *AddFriendByMidRequest) IsSetTracking() bool {
	return p.Tracking != nil
}

func (p *AddFriendByMidRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendByMidRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReqSeq = v
	}
	return nil
}

func (p *AddFriendByMidRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserMid = v
	}
	return nil
}

func (p *AddFriendByMidRequest) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Tracking = &AddFriendTracking{}
	if err := p.Tracking.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tracking), err)
	}
	return nil
}

func (p *AddFriendByMidRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "AddFriendByMidRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendByMidRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "reqSeq", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ReqSeq)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err)
	}
	return err
}

func (p *AddFriendByMidRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "userMid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userMid: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.UserMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userMid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userMid: ", p), err)
	}
	return err
}

func (p *AddFriendByMidRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "tracking", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tracking: ", p), err)
	}
	if err := p.Tracking.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tracking), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tracking: ", p), err)
	}
	return err
}

func (p *AddFriendByMidRequest) Equals(other *AddFriendByMidRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ReqSeq != other.ReqSeq {
		return false
	}
	if p.UserMid != other.UserMid {
		return false
	}
	if !p.Tracking.Equals(other.Tracking) {
		return false
	}
	return true
}

func (p *AddFriendByMidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendByMidRequest(%+v)", *p)
}

type RelationService interface {
	// Parameters:
	//  - Request
	AddFriendByMid(ctx context.Context, request *AddFriendByMidRequest) (_err error)
}

type RelationServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewRelationServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RelationServiceClient {
	return &RelationServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewRelationServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RelationServiceClient {
	return &RelationServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewRelationServiceClient(c thrift.TClient) *RelationServiceClient {
	return &RelationServiceClient{
		c: c,
	}
}

func (p *RelationServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *RelationServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *RelationServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Request
func (p *RelationServiceClient) AddFriendByMid(ctx context.Context, request *AddFriendByMidRequest) (_err error) {
	var _args3 RelationServiceAddFriendByMidArgs
	_args3.Request = request
	var _result5 RelationServiceAddFriendByMidResult
	var _meta4 thrift.ResponseMeta
	_meta4, _err = p.Client_().Call(ctx, "addFriendByMid", &_args3, &_result5)
	p.SetLastResponseMeta_(_meta4)
	if _err != nil {
		return
	}
	switch {
	case _result5.Be != nil:
		return _result5.Be
	case _result5.Ce != nil:
		return _result5.Ce
	case _result5.Te != nil:
		return _result5.Te
	}

	return nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type RelationServiceAddFriendByMidArgs struct {
	Request *AddFriendByMidRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRelationServiceAddFriendByMidArgs() *RelationServiceAddFriendByMidArgs {
	return &RelationServiceAddFriendByMidArgs{}
}

var RelationServiceAddFriendByMidArgs_Request_DEFAULT *AddFriendByMidRequest

func (p *RelationServiceAddFriendByMidArgs) GetRequest() *AddFriendByMidRequest {
	if !p.IsSetRequest() {
		return RelationServiceAddFriendByMidArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *RelationServiceAddFriendByMidArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *RelationServiceAddFriendByMidArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &AddFriendByMidRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "addFriendByMid_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *RelationServiceAddFriendByMidArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationServiceAddFriendByMidArgs(%+v)", *p)
}

// Attributes:
//  - Be
//  - Ce
//  - Te
type RelationServiceAddFriendByMidResult struct {
	Be *RejectedException      `thrift:"be,1" db:"be" json:"be,omitempty"`
	Ce *ServerFailureException `thrift:"ce,2" db:"ce" json:"ce,omitempty"`
	Te *TalkException          `thrift:"te,3" db:"te" json:"te,omitempty"`
}

func NewRelationServiceAddFriendByMidResult() *RelationServiceAddFriendByMidResult {
	return &RelationServiceAddFriendByMidResult{}
}

var RelationServiceAddFriendByMidResult_Be_DEFAULT *RejectedException

func (p *RelationServiceAddFriendByMidResult) GetBe() *RejectedException {
	if !p.IsSetBe() {
		return RelationServiceAddFriendByMidResult_Be_DEFAULT
	}
	return p.Be
}

var RelationServiceAddFriendByMidResult_Ce_DEFAULT *ServerFailureException

func (p *RelationServiceAddFriendByMidResult) GetCe() *ServerFailureException {
	if !p.IsSetCe() {
		return RelationServiceAddFriendByMidResult_Ce_DEFAULT
	}
	return p.Ce
}

var RelationServiceAddFriendByMidResult_Te_DEFAULT *TalkException

func (p *RelationServiceAddFriendByMidResult) GetTe() *TalkException {
	if !p.IsSetTe() {
		return RelationServiceAddFriendByMidResult_Te_DEFAULT
	}
	return p.Te
}
func (p *RelationServiceAddFriendByMidResult) IsSetBe() bool {
	return p.Be != nil
}

func (p *RelationServiceAddFriendByMidResult) IsSetCe() bool {
	return p.Ce != nil
}

func (p *RelationServiceAddFriendByMidResult) IsSetTe() bool {
	return p.Te != nil
}

func (p *RelationServiceAddFriendByMidResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Be = &RejectedException{}
	if err := p.Be.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Be), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidResult) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	p.Ce = &ServerFailureException{}
	if err := p.Ce.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ce), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidResult) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	p.Te = &TalkException{}
	if err := p.Te.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Te), err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "addFriendByMid_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField3(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RelationServiceAddFriendByMidResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetBe() {
		if err := oprot.WriteFieldBegin(ctx, "be", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:be: ", p), err)
		}
		if err := p.Be.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Be), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:be: ", p), err)
		}
	}
	return err
}

func (p *RelationServiceAddFriendByMidResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetCe() {
		if err := oprot.WriteFieldBegin(ctx, "ce", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ce: ", p), err)
		}
		if err := p.Ce.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ce), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ce: ", p), err)
		}
	}
	return err
}

func (p *RelationServiceAddFriendByMidResult) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetTe() {
		if err := oprot.WriteFieldBegin(ctx, "te", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:te: ", p), err)
		}
		if err := p.Te.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Te), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:te: ", p), err)
		}
	}
	return err
}

func (p *RelationServiceAddFriendByMidResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationServiceAddFriendByMidResult(%+v)", *p)
}

type ProxyService interface {
	// Parameters:
	//  - ChatMid
	//  - KickTargets
	//  - CancelTargets
	//  - InviteTargets
	//  - FastAccept
	//  - CloseUrl
	UpdateGroupMembers(ctx context.Context, chatMid string, kickTargets []string, cancelTargets []string, inviteTargets []string, fastAccept bool, closeUrl bool) (_err error)
	Reboot(ctx context.Context) (_err error)
}

type ProxyServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewProxyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ProxyServiceClient {
	return &ProxyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewProxyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ProxyServiceClient {
	return &ProxyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewProxyServiceClient(c thrift.TClient) *ProxyServiceClient {
	return &ProxyServiceClient{
		c: c,
	}
}

func (p *ProxyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ProxyServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *ProxyServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - ChatMid
//  - KickTargets
//  - CancelTargets
//  - InviteTargets
//  - FastAccept
//  - CloseUrl
func (p *ProxyServiceClient) UpdateGroupMembers(ctx context.Context, chatMid string, kickTargets []string, cancelTargets []string, inviteTargets []string, fastAccept bool, closeUrl bool) (_err error) {
	var _args14 ProxyServiceUpdateGroupMembersArgs
	_args14.ChatMid = chatMid
	_args14.KickTargets = kickTargets
	_args14.CancelTargets = cancelTargets
	_args14.InviteTargets = inviteTargets
	_args14.FastAccept = fastAccept
	_args14.CloseUrl = closeUrl
	var _result16 ProxyServiceUpdateGroupMembersResult
	_, _err = p.c.Call(ctx, "updateGroupMembers", &_args14, &_result16)
	if _err != nil {
	  return
	}
	switch {
	case _result16.E!= nil:
	  return _result16.E
	}
  
	return nil
  }

func (p *ProxyServiceClient) Reboot(ctx context.Context) (_err error) {
	var _args17 ProxyServiceRebootArgs
	var _result19 ProxyServiceRebootResult
	var _meta18 thrift.ResponseMeta
	_meta18, _err = p.Client_().Call(ctx, "reboot", &_args17, &_result19)
	p.SetLastResponseMeta_(_meta18)
	if _err != nil {
		return
	}
	switch {
	case _result19.E != nil:
		return _result19.E
	}

	return nil
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ChatMid
//  - KickTargets
//  - CancelTargets
//  - InviteTargets
//  - FastAccept
//  - CloseUrl
type ProxyServiceUpdateGroupMembersArgs struct {
	ChatMid string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
	KickTargets []string `thrift:"kickTargets,2" db:"kickTargets" json:"kickTargets"`
	CancelTargets []string `thrift:"cancelTargets,3" db:"cancelTargets" json:"cancelTargets"`
	InviteTargets []string `thrift:"inviteTargets,4" db:"inviteTargets" json:"inviteTargets"`
	FastAccept bool `thrift:"fastAccept,5" db:"fastAccept" json:"fastAccept"`
	CloseUrl bool `thrift:"closeUrl,6" db:"closeUrl" json:"closeUrl"`
  }
  
  func NewProxyServiceUpdateGroupMembersArgs() *ProxyServiceUpdateGroupMembersArgs {
	return &ProxyServiceUpdateGroupMembersArgs{}
  }
  
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetChatMid() string {
	return p.ChatMid
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetKickTargets() []string {
	return p.KickTargets
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetCancelTargets() []string {
	return p.CancelTargets
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetInviteTargets() []string {
	return p.InviteTargets
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetFastAccept() bool {
	return p.FastAccept
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) GetCloseUrl() bool {
	return p.CloseUrl
  }
  func (p *ProxyServiceUpdateGroupMembersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}
  
  
	for {
	  _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
	  if err != nil {
		return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
	  }
	  if fieldTypeId == thrift.STOP { break; }
	  switch fieldId {
	  case 1:
		if fieldTypeId == thrift.STRING {
		  if err := p.ReadField1(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  case 2:
		if fieldTypeId == thrift.SET {
		  if err := p.ReadField2(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  case 3:
		if fieldTypeId == thrift.SET {
		  if err := p.ReadField3(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  case 4:
		if fieldTypeId == thrift.SET {
		  if err := p.ReadField4(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  case 5:
		if fieldTypeId == thrift.BOOL {
		  if err := p.ReadField5(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  case 6:
		if fieldTypeId == thrift.BOOL {
		  if err := p.ReadField6(ctx, iprot); err != nil {
			return err
		  }
		} else {
		  if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		  }
		}
	  default:
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
		  return err
		}
	  }
	  if err := iprot.ReadFieldEnd(ctx); err != nil {
		return err
	  }
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
	return thrift.PrependError("error reading field 1: ", err)
  } else {
	p.ChatMid = v
  }
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
	  return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.KickTargets =  tSet
	for i := 0; i < size; i ++ {
  var _elem22 string
	  if v, err := iprot.ReadString(ctx); err != nil {
	  return thrift.PrependError("error reading field 0: ", err)
  } else {
	  _elem22 = v
  }
	  p.KickTargets = append(p.KickTargets, _elem22)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
	  return thrift.PrependError("error reading set end: ", err)
	}
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
	  return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.CancelTargets =  tSet
	for i := 0; i < size; i ++ {
  var _elem23 string
	  if v, err := iprot.ReadString(ctx); err != nil {
	  return thrift.PrependError("error reading field 0: ", err)
  } else {
	  _elem23 = v
  }
	  p.CancelTargets = append(p.CancelTargets, _elem23)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
	  return thrift.PrependError("error reading set end: ", err)
	}
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin(ctx)
	if err != nil {
	  return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]string, 0, size)
	p.InviteTargets =  tSet
	for i := 0; i < size; i ++ {
  var _elem24 string
	  if v, err := iprot.ReadString(ctx); err != nil {
	  return thrift.PrependError("error reading field 0: ", err)
  } else {
	  _elem24 = v
  }
	  p.InviteTargets = append(p.InviteTargets, _elem24)
	}
	if err := iprot.ReadSetEnd(ctx); err != nil {
	  return thrift.PrependError("error reading set end: ", err)
	}
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
	return thrift.PrependError("error reading field 5: ", err)
  } else {
	p.FastAccept = v
  }
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(ctx); err != nil {
	return thrift.PrependError("error reading field 6: ", err)
  } else {
	p.CloseUrl = v
  }
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateGroupMembers_args"); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
	if p != nil {
	  if err := p.writeField1(ctx, oprot); err != nil { return err }
	  if err := p.writeField2(ctx, oprot); err != nil { return err }
	  if err := p.writeField3(ctx, oprot); err != nil { return err }
	  if err := p.writeField4(ctx, oprot); err != nil { return err }
	  if err := p.writeField5(ctx, oprot); err != nil { return err }
	  if err := p.writeField6(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
	  return thrift.PrependError("write field stop error: ", err) }
	if err := oprot.WriteStructEnd(ctx); err != nil {
	  return thrift.PrependError("write struct stop error: ", err) }
	return nil
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "chatMid", thrift.STRING, 1); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err) }
	if err := oprot.WriteString(ctx, string(p.ChatMid)); err != nil {
	return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err) }
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "kickTargets", thrift.SET, 2); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kickTargets: ", p), err) }
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.KickTargets)); err != nil {
	  return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i<len(p.KickTargets); i++ {
	  for j := i+1; j<len(p.KickTargets); j++ {
		if func(tgt, src string) bool {
		  if tgt != src { return false }
		  return true
		}(p.KickTargets[i], p.KickTargets[j]) {
		  return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.KickTargets))
		}
	  }
	}
	for _, v := range p.KickTargets {
	  if err := oprot.WriteString(ctx, string(v)); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
	  return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kickTargets: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "cancelTargets", thrift.SET, 3); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cancelTargets: ", p), err) }
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.CancelTargets)); err != nil {
	  return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i<len(p.CancelTargets); i++ {
	  for j := i+1; j<len(p.CancelTargets); j++ {
		if func(tgt, src string) bool {
		  if tgt != src { return false }
		  return true
		}(p.CancelTargets[i], p.CancelTargets[j]) {
		  return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.CancelTargets))
		}
	  }
	}
	for _, v := range p.CancelTargets {
	  if err := oprot.WriteString(ctx, string(v)); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
	  return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cancelTargets: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "inviteTargets", thrift.SET, 4); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inviteTargets: ", p), err) }
	if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.InviteTargets)); err != nil {
	  return thrift.PrependError("error writing set begin: ", err)
	}
	for i := 0; i<len(p.InviteTargets); i++ {
	  for j := i+1; j<len(p.InviteTargets); j++ {
		if func(tgt, src string) bool {
		  if tgt != src { return false }
		  return true
		}(p.InviteTargets[i], p.InviteTargets[j]) {
		  return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InviteTargets))
		}
	  }
	}
	for _, v := range p.InviteTargets {
	  if err := oprot.WriteString(ctx, string(v)); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
	}
	if err := oprot.WriteSetEnd(ctx); err != nil {
	  return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inviteTargets: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "fastAccept", thrift.BOOL, 5); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fastAccept: ", p), err) }
	if err := oprot.WriteBool(ctx, bool(p.FastAccept)); err != nil {
	return thrift.PrependError(fmt.Sprintf("%T.fastAccept (5) field write error: ", p), err) }
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fastAccept: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "closeUrl", thrift.BOOL, 6); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:closeUrl: ", p), err) }
	if err := oprot.WriteBool(ctx, bool(p.CloseUrl)); err != nil {
	return thrift.PrependError(fmt.Sprintf("%T.closeUrl (6) field write error: ", p), err) }
	if err := oprot.WriteFieldEnd(ctx); err != nil {
	  return thrift.PrependError(fmt.Sprintf("%T write field end error 6:closeUrl: ", p), err) }
	return err
  }
  
  func (p *ProxyServiceUpdateGroupMembersArgs) String() string {
	if p == nil {
	  return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceUpdateGroupMembersArgs(%+v)", *p)
  }
  
// Attributes:
//  - E
type ProxyServiceUpdateGroupMembersResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewProxyServiceUpdateGroupMembersResult() *ProxyServiceUpdateGroupMembersResult {
	return &ProxyServiceUpdateGroupMembersResult{}
}

var ProxyServiceUpdateGroupMembersResult_E_DEFAULT *TalkException

func (p *ProxyServiceUpdateGroupMembersResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ProxyServiceUpdateGroupMembersResult_E_DEFAULT
	}
	return p.E
}
func (p *ProxyServiceUpdateGroupMembersResult) IsSetE() bool {
	return p.E != nil
}

func (p *ProxyServiceUpdateGroupMembersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProxyServiceUpdateGroupMembersResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ProxyServiceUpdateGroupMembersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "updateGroupMembers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProxyServiceUpdateGroupMembersResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ProxyServiceUpdateGroupMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceUpdateGroupMembersResult(%+v)", *p)
}

type ProxyServiceRebootArgs struct {
}

func NewProxyServiceRebootArgs() *ProxyServiceRebootArgs {
	return &ProxyServiceRebootArgs{}
}

func (p *ProxyServiceRebootArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProxyServiceRebootArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reboot_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProxyServiceRebootArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceRebootArgs(%+v)", *p)
}

// Attributes:
//  - E
type ProxyServiceRebootResult struct {
	E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewProxyServiceRebootResult() *ProxyServiceRebootResult {
	return &ProxyServiceRebootResult{}
}

var ProxyServiceRebootResult_E_DEFAULT *TalkException

func (p *ProxyServiceRebootResult) GetE() *TalkException {
	if !p.IsSetE() {
		return ProxyServiceRebootResult_E_DEFAULT
	}
	return p.E
}
func (p *ProxyServiceRebootResult) IsSetE() bool {
	return p.E != nil
}

func (p *ProxyServiceRebootResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProxyServiceRebootResult) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.E = &TalkException{}
	if err := p.E.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
	}
	return nil
}

func (p *ProxyServiceRebootResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reboot_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProxyServiceRebootResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err)
		}
		if err := p.E.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err)
		}
	}
	return err
}

func (p *ProxyServiceRebootResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProxyServiceRebootResult(%+v)", *p)
}
